///////////////////////////////////
//
// SG4SrcMiscSamples
//
// File for sample simulations.
//To add a sample, add another if() routine 

#include "SG4SrcMisc.hh"
#include "G4Sphere.hh"
#include "SG4CountingPot.hh"
#include "G4Polyhedra.hh"
#include "G4Trap.hh"
#include "G4EllipticalTube.hh"

void SG4SrcMisc::ConstructSolid(G4LogicalVolume *logdetector, G4double zp)
{
  if(fDebug== 1){
    printf("SG4SrcMisc::ConstructSolid()\n");
  }
  bool FoundID = false;
  
  // Declare variables for adding materials
  //(c++ gets confused easily if the function arguments don't have an explicit variable type. So we declare them here.)
  __attribute__((unused)) G4double density = 0; //disable compiler "unused warnings"
  __attribute__((unused)) G4int z = 0;
  __attribute__((unused)) G4int n_comps = 2;
  __attribute__((unused)) G4double mass_fraction = 0;
  __attribute__((unused)) G4int n_atoms = 1;
  G4Material* fMat;
//  G4Material* fMat_lens; 
//  G4Material* fMat_lens_SS;
//  G4Material* fMat_empty;
//  G4Material* fMat_camera;
//  G4Material* fMat_camera_plastic; 
  G4RotationMatrix *noRotation = new G4RotationMatrix(0.0*deg,0.0*deg,0.0*deg);
  
  //Define commonly used elements.

  __attribute__((unused)) G4Element *elH = man->FindOrBuildElement(z=1);
  __attribute__((unused)) G4Isotope *H2 = new G4Isotope("H2", z=1, 2, 2.01355*g/mole);
  __attribute__((unused)) G4Element *elD = new G4Element("Deuterium", "D", 1);
  elD->AddIsotope(H2, mass_fraction = 100*perCent);
  __attribute__((unused)) G4Element *elB = man->FindOrBuildElement(z=5);
  __attribute__((unused)) G4Element *elC = man->FindOrBuildElement(z=6);
  __attribute__((unused)) G4Element *elN = man->FindOrBuildElement(z=7);
  __attribute__((unused)) G4Element *elO = man->FindOrBuildElement(z=8);
  __attribute__((unused)) G4Element *elF = man->FindOrBuildElement(z=9);
  __attribute__((unused)) G4Element *elNa = man->FindOrBuildElement(z=11);
  __attribute__((unused)) G4Element *elMg = man->FindOrBuildElement(z=12);
  __attribute__((unused)) G4Element *elAl = man->FindOrBuildElement(z=13);
  __attribute__((unused)) G4Element *elSi = man->FindOrBuildElement(z=14);
  __attribute__((unused)) G4Element *elS = man->FindOrBuildElement(z=16);
  __attribute__((unused)) G4Element *elCl = man->FindOrBuildElement(z=17);
  __attribute__((unused)) G4Element *elK = man->FindOrBuildElement(z=19);
  __attribute__((unused)) G4Element *elCa = man->FindOrBuildElement(z=20);
  __attribute__((unused)) G4Element *elTi = man->FindOrBuildElement(z=22);
  __attribute__((unused)) G4Element *elCr = man->FindOrBuildElement(z=24);
  __attribute__((unused)) G4Element *elFe = man->FindOrBuildElement(z=26);
  __attribute__((unused)) G4Element *elNi = man->FindOrBuildElement(z=28);
  __attribute__((unused)) G4Element *elCu = man->FindOrBuildElement(z=29);
  __attribute__((unused)) G4Element *elZr = man->FindOrBuildElement(z=40);
  __attribute__((unused)) G4Element *elNb = man->FindOrBuildElement(z=41);
  __attribute__((unused)) G4Element *elMo = man->FindOrBuildElement(z=42);
  __attribute__((unused)) G4Element *elI = man->FindOrBuildElement(z=53);
  __attribute__((unused)) G4Element *elNd = man->FindOrBuildElement(z=60);
  __attribute__((unused)) G4Element *elGd = man->FindOrBuildElement(z=64);
  __attribute__((unused)) G4Element *elW = man->FindOrBuildElement(z=74);
  __attribute__((unused)) G4Element *elMn = man->FindOrBuildElement(z=25);
  __attribute__((unused)) G4Element *elZn = man->FindOrBuildElement(z=30);
  __attribute__((unused)) G4Element *elPb = man->FindOrBuildElement(z=82);
  __attribute__((unused)) G4Element *elSn = man->FindOrBuildElement(z=50);
  __attribute__((unused)) G4Element *elAg = man->FindOrBuildElement(z=47);
  __attribute__((unused)) G4Element *elCs = man->FindOrBuildElement(z=55); 
  if (fSourceMaterialID == 0){
    FoundID = true;
    density = 1e-8; 
    sprintf(fSourceMaterialName,"Empty Misc");
    printf("Error: trying to simulate empty SrcMisc.\n Source volume must be declared.\n");
  }

  if (fSourceMaterialID == 1){
    FoundID = true;
    density = 8.03*g/cm3; //668.7 g in 83.261 cm^3
    sprintf(fSourceMaterialName,"Steel Sphere 150504");
    fMat = new G4Material("Steel",density,4);
    fMat->AddElement(elCr, mass_fraction = 17.5 * perCent); 
    fMat->AddElement(elFe, mass_fraction = 68.0 * perCent); 
    fMat->AddElement(elNi, mass_fraction = 12.0 * perCent); 
    fMat->AddElement(elMo, mass_fraction = 2.5 * perCent);


    G4Sphere *VolSolid = new G4Sphere("spherecontents",52*mm,56.5*mm,0,360*deg,0,90*deg);
    G4ThreeVector Center(0, 0, zp-30*mm);    
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);

  }
  if (fSourceMaterialID == 2){
    // SLB005 on an aluminum + acrylic stand
    // COAX runs 180911 to 18091103
    FoundID = true;
    G4Material* fMatStand = man->FindOrBuildMaterial("G4_Al");
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    G4double ri[20];
    G4double ro[20];
    G4double zz[20];
    G4int n;

    // aluminum stand
    n=0;
    //bottom
    ri[n] = 41*mm; ro[n] = 44*mm; zz[n] = zp+3*mm;n++;
    ri[n] = 41*mm; ro[n] = 44*mm; zz[n] = zp+63*mm;n++;
    ri[n] = 38*mm; ro[n] = 44*mm; zz[n] = zp+63*mm;n++;
    ri[n] = 38*mm; ro[n] = 44*mm; zz[n] = zp+68*mm;n++;
    ri[n] = 38*mm; ro[n] = 41*mm; zz[n] = zp+68*mm;n++;
    ri[n] = 38*mm; ro[n] = 44*mm; zz[n] = zp+1003*mm;n++;
    G4Polycone *VolStand = new G4Polycone("stand_volume",0,360*deg, n, zz, ri, ro);
    G4LogicalVolume *fLogStand = new G4LogicalVolume(VolStand, fMatStand, "LogStand",0,0,0);
    G4VisAttributes *StandColor = new G4VisAttributes();
    StandColor->SetColor(G4Color(0.58, 0.64, 0.64));
    fLogStand->SetVisAttributes(StandColor);
    __attribute__((unused)) G4VPhysicalVolume *fPhyStand = new G4PVPlacement( noRotation,G4ThreeVector(0,0,0), fLogStand, "Stand", logdetector, false, 0);

    //Source
    G4double DeploymentHeight = 31.2*cm+3*mm; //+3mm = plastic wrap
    G4double SourceHeight = 29*mm;
    G4double SourceRadius = 12.7*mm;
    
    G4VisAttributes *AcColor = new G4VisAttributes();
    AcColor->SetColor(G4Color(0.36, 0.68, 0.88));


    //Active Volume
    n=0;
    ri[n] = 0*mm; ro[n] = 4*mm;
    zz[n] = zp+DeploymentHeight+SourceHeight-1.1778*cm;n++;
    //zz[n] = zp+DeploymentHeight+1.1778*cm;n++;
    ri[n] = 0*mm; ro[n] = 4*mm;
    zz[n] = zp+DeploymentHeight+SourceHeight-1.0*cm;n++;
    //zz[n] = zp+DeploymentHeight+1.0*cm;n++;
    G4Polycone *VolSolid = new G4Polycone("Active_Volume",0,360*deg, n, zz, ri, ro);
    
    //Disk
    n=0;
    ri[n] = 0*mm; ro[n] = 38*mm;
    zz[n] = zp+DeploymentHeight-3*mm;n++;
    ri[n] = 0*mm; ro[n] = 38*mm;
    zz[n] = zp+DeploymentHeight;n++;
    G4Polycone *VolDisk = new G4Polycone("Disk_Solid",0,360*deg, n, zz, ri, ro);
    G4LogicalVolume *fLogDisk = new G4LogicalVolume(VolDisk, fMatAcrylic, "LogDisk",0,0,0);
    fLogDisk->SetVisAttributes(AcColor);
    __attribute__((unused)) G4VPhysicalVolume *fPhyDisk = new G4PVPlacement( noRotation,G4ThreeVector(0,0,0), fLogDisk, "Disk", logdetector, false, 0);

    //Source Encapsulation
    n=0;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = zp+DeploymentHeight;n++;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = zp+DeploymentHeight+SourceHeight;n++;
    G4Polycone *VolSourceFull = new G4Polycone("FullSourceVolume",0,360*deg, n, zz, ri, ro);
    G4VSolid *VolSourceAcrylic = new G4SubtractionSolid("Source Inactive Volume", VolSourceFull, VolSolid);
    G4LogicalVolume *fLogSourceAcrylic = new G4LogicalVolume(VolSourceAcrylic, fMatAcrylic, "LogSourceAcrylic",0,0,0);
    fLogSourceAcrylic->SetVisAttributes(AcColor);
    __attribute__((unused)) G4VPhysicalVolume *fPhySourceAcrylic = new G4PVPlacement( noRotation,G4ThreeVector(0,0,0), fLogSourceAcrylic, "Source Inactive Acrylic", logdetector, false, 0);
   
    //finish active source 
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation,G4ThreeVector(0,0,0), fLogContents, "Source Solid", logdetector, false, 0);

    //Set up Bounding Box for MC generation
    dBoundingBoxLength = -1;
    dBBxlo = -SourceRadius - 1*mm;
    dBBxhi = SourceRadius + 1*mm;
    dBBylo = -SourceRadius - 1*mm;
    dBByhi = SourceRadius + 1*mm;
    dBBzlo = zp + DeploymentHeight + SourceHeight -1.3*cm;
    //dBBzlo = zp + DeploymentHeight + 1.3*cm;
    dBBzhi = zp + DeploymentHeight + SourceHeight - 9*mm;
    //dBBzhi = zp + DeploymentHeight + 9*mm;
    
  }      
  
  if (fSourceMaterialID == 3){
    zp += 2*mm;    
    FoundID = true;
    density = 8.96*g/cm3; 
    sprintf(fSourceMaterialName,"Aurubis Copper");
    fMat = new G4Material("Copper",density,1);
    fMat->AddElement(elCu, mass_fraction = 100 * perCent);
    
    G4double rSmall = 63.5*mm; //2.5 inch
    G4double tSmall = 2.921*mm;//.115 inch
    G4double rBig = 76.2*mm; //3 inch
    G4double tBig = 6.35*mm; 



    //4 half-cylinder plates in various orientations
    // plate 1 - back, big
    
    G4Tubs *cyl1 = new G4Tubs("Disk1",0,rBig, tBig/2, 0*deg, 180*deg); 
    G4ThreeVector Center1(-rSmall - tBig/2, 0, zp + 25.4*mm);
    G4RotationMatrix *Rot1= new G4RotationMatrix(90*deg,-90*deg,0*deg);
    
    // palte 2 - top, left
    G4Tubs *cyl2 = new G4Tubs("Disk2",0,rSmall, tSmall/2, 0, 180*deg); 
    G4ThreeVector Center2(0, 0, zp);
    
    //plate 3 - top, right
    G4Tubs *cyl3 = new G4Tubs("Disk3",0,rSmall, tSmall/2, 180*deg, 360*deg); 
    G4ThreeVector Center3(0, 0, zp);

    // plate 4, fron
    G4Tubs *cyl4 = new G4Tubs("Disk4",0,rBig, tBig/2, 0*deg, 180*deg); 
    G4ThreeVector Center4(rSmall + tBig/2, 0, zp + 25.4*mm);
    G4RotationMatrix *Rot4 = new G4RotationMatrix(90*deg,-90*deg,0*deg);

    //Will refernce from plate 2 center
    G4ThreeVector Diff21 = Center1 - Center2;
    G4ThreeVector Diff24 = Center4 - Center2;
    
    G4VSolid *plates23 = new G4UnionSolid("Disks 2 and 3", cyl2, cyl3);
    G4VSolid *plates123 = new G4UnionSolid("Disks 1, 2, and 3", plates23, cyl1, Rot1, Diff21);
    G4VSolid *plates1234 = new G4UnionSolid("Disks 1, 2, 3, and 4", plates123, cyl4, Rot4, Diff24);
    
    fLogContents = new G4LogicalVolume(plates1234, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center2, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 20*cm; //>2 * greatest distance from center of Ge crystal
  }
  if (fSourceMaterialID == 4){
    // SLB028, SLB029 on an aluminum + acrylic stand
    // COAX runs ??
    FoundID = true;
    G4Material* fMatStand = man->FindOrBuildMaterial("G4_Al");
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    density = 8.0*g/cm3;
    G4Material* fMatSteel = new G4Material("Steel",density,4);
    fMatSteel->AddElement(elCr, mass_fraction = 17.5 * perCent); 
    fMatSteel->AddElement(elFe, mass_fraction = 68.0 * perCent); 
    fMatSteel->AddElement(elNi, mass_fraction = 12.0 * perCent); 
    fMatSteel->AddElement(elMo, mass_fraction = 2.5 * perCent);

    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    G4double ri[20];
    G4double ro[20];
    G4double zz[20];
    G4int n;

    // aluminum stand
    n=0;
    //bottom
    ri[n] = 41*mm; ro[n] = 44*mm; zz[n] = zp+3*mm;n++;
    ri[n] = 41*mm; ro[n] = 44*mm; zz[n] = zp+63*mm;n++;
    ri[n] = 38*mm; ro[n] = 44*mm; zz[n] = zp+63*mm;n++;
    ri[n] = 38*mm; ro[n] = 44*mm; zz[n] = zp+68*mm;n++;
    ri[n] = 38*mm; ro[n] = 41*mm; zz[n] = zp+68*mm;n++;
    ri[n] = 38*mm; ro[n] = 44*mm; zz[n] = zp+1003*mm;n++;
    G4Polycone *VolStand = new G4Polycone("stand_volume",0,360*deg, n, zz, ri, ro);
    G4LogicalVolume *fLogStand = new G4LogicalVolume(VolStand, fMatStand, "LogStand",0,0,0);
    G4VisAttributes *StandColor = new G4VisAttributes();
    StandColor->SetColor(G4Color(0.58, 0.64, 0.64));
    fLogStand->SetVisAttributes(StandColor);
    __attribute__((unused)) G4VPhysicalVolume *fPhyStand = new G4PVPlacement( noRotation,G4ThreeVector(0,0,0), fLogStand, "Stand", logdetector, false, 0);

    //Source
    G4double DeploymentHeight = 31.2*cm+3*mm //+3mm = plastic wrap
      + 5 *mm ; // SLB 028 has stands on 5 mm of shrink tube. 
    G4double BottomThickness = 1*mm + 0.5*mm;
    G4double SourceRadius = 3*mm+1*mm;
    G4double SourceHeight = 25.4*mm;
    
    G4VisAttributes *AcColor = new G4VisAttributes();
    AcColor->SetColor(G4Color(0.36, 0.68, 0.88));
    G4VisAttributes *StColor = new G4VisAttributes();
    StColor->SetColor(G4Color(0.0, 0.4, 0.0));


    //Active Volume
    //estimated dimensions, material estimated as acrylic.
    n=0;
    ri[n] = 0*mm; ro[n] = 1.5*mm;
    zz[n] = zp+DeploymentHeight+BottomThickness;n++;
    ri[n] = 0*mm; ro[n] = 1.5*mm;
    zz[n] = zp+DeploymentHeight+BottomThickness + 2*mm;n++;
    G4Polycone *VolSolid = new G4Polycone("Active_Volume",0,360*deg, n, zz, ri, ro);
    
    //Disk
    n=0;
    ri[n] = 0*mm; ro[n] = 38*mm;
    zz[n] = zp+DeploymentHeight-3*mm // nominal
      - 5*mm; //SLB028 stands on 5 mm of shrink tube. 
    n++;
    ri[n] = 0*mm; ro[n] = 38*mm;
    zz[n] = zp+DeploymentHeight //nominal
      - 5*mm; //SLB028 stands on 5 mm of shrink tube.
    n++;
    G4Polycone *VolDisk = new G4Polycone("Disk_Solid",0,360*deg, n, zz, ri, ro);
    G4LogicalVolume *fLogDisk = new G4LogicalVolume(VolDisk, fMatAcrylic, "LogDisk",0,0,0);
    fLogDisk->SetVisAttributes(AcColor);
    __attribute__((unused)) G4VPhysicalVolume *fPhyDisk = new G4PVPlacement( noRotation,G4ThreeVector(0,0,0), fLogDisk, "Disk", logdetector, false, 0);

    //Source Encapsulation
    n=0;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = zp+DeploymentHeight;n++;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = zp+DeploymentHeight+SourceHeight;n++;
    G4Polycone *VolSourceFull = new G4Polycone("FullSourceVolume",0,360*deg, n, zz, ri, ro);
    G4VSolid *VolSourceAcrylic = new G4SubtractionSolid("Source Inactive Volume", VolSourceFull, VolSolid);
    G4LogicalVolume *fLogSourceAcrylic = new G4LogicalVolume(VolSourceAcrylic, fMatSteel, "LogSourceAcrylic",0,0,0);
    fLogSourceAcrylic->SetVisAttributes(StColor);
    __attribute__((unused)) G4VPhysicalVolume *fPhySourceAcrylic = new G4PVPlacement( noRotation,G4ThreeVector(0,0,0), fLogSourceAcrylic, "Source Inactive Acrylic", logdetector, false, 0);
   
    //finish active source 
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation,G4ThreeVector(0,0,0), fLogContents, "Source Solid", logdetector, false, 0);

    //Set up Bounding Box for MC generation
    dBoundingBoxLength = -1;
    dBBxlo = -SourceRadius - 1*mm;
    dBBxhi = SourceRadius + 1*mm;
    dBBylo = -SourceRadius - 1*mm;
    dBByhi = SourceRadius + 1*mm;
    dBBzlo = zp + DeploymentHeight + BottomThickness;
    dBBzhi = zp + DeploymentHeight + BottomThickness + 2*mm;
    
  }      

  if (fSourceMaterialID == 5){
    FoundID = true;
    density = 1.364 * g/cm3;
    sprintf(fSourceMaterialName,"Viton Gopher 190123");
    fMat = new G4Material("Viton",density,2);
    fMat->AddElement(elF, mass_fraction = 68 * perCent);
    fMat->AddElement(elC, mass_fraction = 32 * perCent);

    
    
    //define source geometry however you want.
    G4double xLength1 = 152.4*mm;
    G4double yLength1 = 206.6*mm;
    G4double Height1 = 50.8*mm;
    G4double yOffset1 = 50.8*mm;
    G4double zOffset1 = zp + Height1/2;

    G4double xLength2 = 152.4*mm;
    G4double yLength2 = 101.6*mm;
    G4double Height2 = 76.2*mm;
    G4double yOffset2 = yLength2/2 + 52.5*mm;
    G4double zOffset2 = zp - Height2/2;

    
    G4Box *VolCube1 = new G4Box("top solid",xLength1/2, yLength1/2, Height1/2);
    G4Box *VolCube2 = new G4Box("bottom solid",xLength2/2, yLength2/2, Height2/2);

    G4ThreeVector Difference(0, -yOffset1+yOffset2, -zOffset1+zOffset2);

    //if mulitple pieces are used, they must be joined into a G4UnionSolid and that must be passed to fLogContents. 
    G4VSolid *VolSolid = new G4UnionSolid("Simulated Solid", VolCube1, VolCube2, noRotation, Difference);

    //Move the origin of the solid away from the center of the detector. 
    G4ThreeVector Center(0, yOffset1, zOffset1);
    
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 35*cm; //>2 * greatest distance from center of Ge crystal
  }
  
  if (fSourceMaterialID == 6){
    FoundID = true;
    density = 0.518 * g/cm3;
    sprintf(fSourceMaterialName,"Buna-N Gopher 190125");
    fMat = new G4Material("Buna",density,3);
    fMat->AddElement(elN, n_atoms = 1);
    fMat->AddElement(elC, n_atoms = 3);
    fMat->AddElement(elH, n_atoms = 3);
    
    
    //define source geometry however you want.
    G4double xLength1 = 19.05*cm;
    G4double yLength1 = 228.6*mm;
    G4double Height1 = 50.8*mm;
    G4double yOffset1 = 39.8*mm;
    G4double zOffset1 = zp + Height1/2;

    G4double xLength2 = 19.05*cm;
    G4double yLength2 = 10.16*cm;
    G4double Height2 = 7.62*cm;
    G4double yOffset2 = yLength2/2 + 52.5*mm;
    G4double zOffset2 = zp - Height2/2;

    
    G4Box *VolCube1 = new G4Box("top solid",xLength1/2, yLength1/2, Height1/2);
    G4Box *VolCube2 = new G4Box("bottom solid",xLength2/2, yLength2/2, Height2/2);

    G4ThreeVector Difference(0, -yOffset1+yOffset2, -zOffset1+zOffset2);

    //if mulitple pieces are used, they must be joined into a G4UnionSolid and that must be passed to fLogContents. 
    G4VSolid *VolSolid = new G4UnionSolid("Simulated Solid", VolCube1, VolCube2, noRotation, Difference);

    //Move the origin of the solid away from the center of the detector. 
    G4ThreeVector Center(0, yOffset1, zOffset1);
    
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 35*cm; //>2 * greatest distance from center of Ge crystal
  }

  if (fSourceMaterialID == 7){
    FoundID = true;
    density = 0.76*g/cm3; 
    sprintf(fSourceMaterialName,"1inch Air Filters");
    fMat =new G4Material("1inch Air Filters",density,2); 
    fMat->AddElement(elC, n_atoms = 3);
    fMat->AddElement(elH, n_atoms = 6);
 
    G4double density2 = 0.843*g/cm3; 
    G4Material *fMatDisc = new G4Material("1inch PVC Container",density2,3); 
    fMatDisc->AddElement(elC, n_atoms = 2);
    fMatDisc->AddElement(elH, n_atoms = 3);
    fMatDisc->AddElement(elCl, n_atoms = 1);
 
    G4double InnerRadius = 12.65*mm;
    G4double OuterRadius = 12.75*mm;
    G4double InnerHeight = 3.18*mm;
    G4double OuterHeight = 3.38*mm;
    
    //define source geometry however you want. 
    G4Tubs *VolFilter = new G4Tubs("Filter Volume",0,InnerRadius,InnerHeight/2,0*deg,360*deg);
    G4Tubs *VolFilterContainer = new G4Tubs("Filter Container Volume",0,OuterRadius,OuterHeight/2,0*deg,360*deg); 
    //if mulitple pieces are used, they must be joined into a G4UnionSolid and that must be passed to fLogContents. 
    G4VSolid *VolFull = new G4SubtractionSolid("Full Volume", VolFilterContainer,VolFilter,noRotation,G4ThreeVector(0,0,0)); 
    G4VSolid *VolSolid = VolFilter; 
    
    //Move the origin of the solid away from the center of the detector. 
    G4ThreeVector Center(0, 0, zp+OuterHeight/2);
    // (0,0,zp) is the top-center of each can. 
    //DAWN views from the x-direction, so place non-symmetric solids in the y-z plane. 
    
    G4LogicalVolume *fLogFilterContainer = new G4LogicalVolume(VolFull, fMatDisc, "LogContainer", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyFilterContainer = new G4PVPlacement(noRotation, Center, fLogFilterContainer, "Filter Container", logdetector, false, 0); 
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 35*cm; //>2 * greatest distance from center of Ge crystal
  }
  if (fSourceMaterialID == 8){
    FoundID = true;
    density = 0.76*g/cm3; 
    sprintf(fSourceMaterialName,"4 x 1inch Air Filters");
    fMat =new G4Material("4 x 1inch Air Filters",density,2); 
    fMat->AddElement(elC, n_atoms = 3);
    fMat->AddElement(elH, n_atoms = 6);
 
    G4double density2 = 0.843*g/cm3; 
    G4Material *fMatDisc = new G4Material("4 x 1inch PVC Container",density2,3); 
    fMatDisc->AddElement(elC, n_atoms = 2);
    fMatDisc->AddElement(elH, n_atoms = 3);
    fMatDisc->AddElement(elCl, n_atoms = 1);
 
    G4double InnerRadius = 12.65*mm;
    G4double OuterRadius = 12.75*mm;
    G4double InnerHeight = 3.18*mm;
    G4double OuterHeight = 3.38*mm;
    

    G4Tubs *VolFilter1 = new G4Tubs("Filter1 Volume",0,InnerRadius,InnerHeight/2,0*deg,360*deg);
    G4Tubs *VolFilter2 = new G4Tubs("Filter2 Volume",0,InnerRadius,InnerHeight/2,0*deg,360*deg);
    G4Tubs *VolFilter3 = new G4Tubs("Filter3 Volume",0,InnerRadius,InnerHeight/2,0*deg,360*deg);
    G4Tubs *VolFilter4 = new G4Tubs("Filter4 Volume",0,InnerRadius,InnerHeight/2,0*deg,360*deg);
    G4Tubs *VolFullContainer = new G4Tubs("Filter Container Volume",0,OuterRadius,OuterHeight/2,0*deg,360*deg); 

    G4VSolid *VolContainer1 = new G4SubtractionSolid("Container1", VolFullContainer,VolFilter1,noRotation,G4ThreeVector(0,0,0));
    G4VSolid *VolContainer2 = new G4SubtractionSolid("Container2", VolFullContainer,VolFilter1,noRotation,G4ThreeVector(0,0,0));
    G4VSolid *VolContainer3 = new G4SubtractionSolid("Container3", VolFullContainer,VolFilter1,noRotation,G4ThreeVector(0,0,0));
    G4VSolid *VolContainer4 = new G4SubtractionSolid("Container4", VolFullContainer,VolFilter1,noRotation,G4ThreeVector(0,0,0));

    G4ThreeVector Center(0, 0, zp+OuterHeight/2);
    G4ThreeVector TopRight(OuterRadius, OuterRadius, zp+OuterHeight/2);
    G4ThreeVector TopLeft(-OuterRadius, OuterRadius, zp+OuterHeight/2);
    G4ThreeVector BottomRight(OuterRadius, -OuterRadius, zp+OuterHeight/2);
    G4ThreeVector BottomLeft(-OuterRadius, -OuterRadius, zp+OuterHeight/2);

    G4VSolid *Add2 =  new G4UnionSolid("Add2", VolFilter1, VolFilter2, noRotation, TopLeft-TopRight);
    G4VSolid *Add3 = new G4UnionSolid("Add3", Add2, VolFilter3, noRotation, BottomRight-TopRight);
    G4VSolid *VolSolid = new G4UnionSolid("4 Filters", Add3, VolFilter4, noRotation, BottomLeft-TopRight);
    
    
    
        
    G4LogicalVolume *fLogFilterContainer1 = new G4LogicalVolume(VolContainer1, fMatDisc, "LogContainer1", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyFilterContainer1 = new G4PVPlacement(noRotation, TopRight, fLogFilterContainer1, "Filter Container1", logdetector, false, 0); 
    G4LogicalVolume *fLogFilterContainer2 = new G4LogicalVolume(VolContainer2, fMatDisc, "LogContainer2", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyFilterContainer2 = new G4PVPlacement(noRotation, BottomRight, fLogFilterContainer2, "Filter Container2", logdetector, false, 0); 
    G4LogicalVolume *fLogFilterContainer3 = new G4LogicalVolume(VolContainer3, fMatDisc, "LogContainer3", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyFilterContainer3 = new G4PVPlacement(noRotation, TopLeft, fLogFilterContainer3, "Filter Container3", logdetector, false, 0); 
    G4LogicalVolume *fLogFilterContainer4 = new G4LogicalVolume(VolContainer4, fMatDisc, "LogContainer4", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyFilterContainer4 = new G4PVPlacement(noRotation, BottomLeft, fLogFilterContainer4, "Filter Container4", logdetector, false, 0); 



    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, TopRight, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 35*cm; //>2 * greatest distance from center of Ge crystal
  }

  if (fSourceMaterialID == 9){
    FoundID = true;
    density = 0.67*g/cm3;
    sprintf(fSourceMaterialName,"2inch Air Filters");
    fMat =new G4Material("2inch Air Filters",density,2);    
    fMat->AddElement(elC, n_atoms = 3);
    fMat->AddElement(elH, n_atoms = 6);

    G4double density2 = 0.843*g/cm3;
    G4Material *fMatDisc = new G4Material("1inch PVC Container",density2,3);    
    fMatDisc->AddElement(elC, n_atoms = 2);
    fMatDisc->AddElement(elH, n_atoms = 3);
    fMatDisc->AddElement(elCl, n_atoms = 1);

    G4double InnerRadius = 25.00*mm;
    G4double OuterRadius = 25.60*mm;
    G4double InnerHeight = 4.5*mm;
    G4double OuterHeight = 5.7*mm;

    //define source geometry however you want. 
    G4Tubs *VolFilter = new G4Tubs("Filter Volume",0,InnerRadius,InnerHeight/2,0*deg,360*deg);
    G4Tubs *VolFilterContainer = new G4Tubs("Filter Container Volume",0,OuterRadius,OuterHeight/2,0*deg,360*deg);
    //if mulitple pieces are used, they must be joined into a G4UnionSolid and that must be passed to fLogContents. 
    G4VSolid *VolFull = new G4SubtractionSolid("Full Volume", VolFilterContainer,VolFilter,noRotation,G4ThreeVector(0,0,0));
    G4VSolid *VolSolid = VolFilter;
    
    //Move the origin of the solid away from the center of the detector. 
    G4ThreeVector Center(0, 0, zp+OuterHeight/2);
    // (0,0,zp) is the top-center of each can. 
    //DAWN views from the x-direction, so place non-symmetric solids in the y-z plane. 
    
    G4LogicalVolume *fLogFilterContainer = new G4LogicalVolume(VolFull, fMatDisc, "LogContainer", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyFilterContainer = new G4PVPlacement(noRotation, Center, fLogFilterContainer, "Filter Container", logdetector, false, 0);
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 35*cm; //>2 * greatest distance from center of Ge crystal
   }

  if (fSourceMaterialID == 10){
    FoundID = true;
    density = 0.80*g/cm3;
    sprintf(fSourceMaterialName,"Dried fish samples");
    fMat =new G4Material("dried fish samples",density,3);
    fMat->AddElement(elC, n_atoms = 6);
    fMat->AddElement(elH, n_atoms = 10);
    fMat->AddElement(elO, n_atoms = 5);

    G4double density2 = 1.19*g/cm3;
    G4Material *fMatDisc = new G4Material("Polycarbnate Container",density2,3);
    fMatDisc->AddElement(elC, n_atoms = 15);
    fMatDisc->AddElement(elH, n_atoms = 16);
    fMatDisc->AddElement(elO, n_atoms = 2);

    G4double InnerRadius = 25.50*mm;
    G4double OuterRadius = 34.5*mm;
    G4double InnerHeight = 23*mm;
    G4double OuterHeight = 27*mm;

    //define source geometry however you want. 
    G4Tubs *VolFilter = new G4Tubs("Filter Volume",0,InnerRadius,InnerHeight/2,0*deg,360*deg);
    G4Tubs *VolFilterContainer = new G4Tubs("Filter Container Volume",0,OuterRadius,OuterHeight/2,0*deg,360*deg);
    //if mulitple pieces are used, they must be joined into a G4UnionSolid and that must be passed to fLogContents. 
    G4VSolid *VolFull = new G4SubtractionSolid("Full Volume", VolFilterContainer,VolFilter,noRotation,G4ThreeVector(0,0,0));
    G4VSolid *VolSolid = VolFilter;
    
    //Move the origin of the solid away from the center of the detector. 
    G4ThreeVector Center(0, 0, zp+OuterHeight/2);
    // (0,0,zp) is the top-center of each can. 
    //DAWN views from the x-direction, so place non-symmetric solids in the y-z plane. 
    
    G4LogicalVolume *fLogFilterContainer = new G4LogicalVolume(VolFull, fMatDisc, "LogContainer", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyFilterContainer = new G4PVPlacement(noRotation, Center, fLogFilterContainer, "Filter Container", logdetector, false, 0);
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 35*cm; //>2 * greatest distance from center of Ge crystal
    
 }
  
  if (fSourceMaterialID == 11){
    //SLB010, 152Eu (104926), 1mm active diameter in 25.4mm acrylic disk, 3.2mm thickness 
    //Source at 90mm above
    FoundID = true;
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    G4double ri[20];
    G4double ro[20];
    G4double zz[20];
    G4int n;

    //creating counting pot
    SG4CountingPot* VCPot = new SG4CountingPot();
    VCPot->SG4CountingPot::Init();
    VCPot->SG4CountingPot::BottomCenter = G4ThreeVector(0,0,zp);
    SG4CountingPot* VCPot2 = new SG4CountingPot();
    VCPot2->SG4CountingPot::Init();
    VCPot2->SG4CountingPot::BottomCenter = G4ThreeVector(0,0,zp+45*mm);

    //define material used to fill counting pot. Use UG density N2
    G4double densityN2 = 1.43e-3 * g/cm3; //underground density
    G4double a = 14.0 * g/mole;
    G4Material *fMatN = new G4Material("N2", 7.0 , a , densityN2);
    //fMatN->AddElement(elN, n_atoms = 2);

    //Fill the pot so they are not null
    VCPot->SG4CountingPot::MakeAndFillPot(logdetector,1*mm,fMatN);
    VCPot->SG4CountingPot::ConstructPotLid(logdetector);
    VCPot2->SG4CountingPot::MakeAndFillPot(logdetector,1*mm,fMatN);
    VCPot2->SG4CountingPot::ConstructPotLid(logdetector);

    //Source
    G4double DeploymentHeight = 90*mm; //Change this for different pos
    G4double BottomThickness = 1*mm;
    G4double SourceRadius = 25.4/2 *mm;
    G4double SourceHeight = 3.2*mm;
    G4double ActiveThickness = 1.2*mm; //from 3.2-1-1
   
    G4VisAttributes *StColor = new G4VisAttributes();
    StColor->SetColor(G4Color(0.0, 0.4, 0.0));

    //define source geometry however you want. Active volume 
    n=0; //# of z planes (will be 2 in our case)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = zp + DeploymentHeight + BottomThickness; n++; //zz=z-plane, increment n (finished plane)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = zp + DeploymentHeight + BottomThickness + ActiveThickness; n++; //zz=z-plane, increment n (finished plane)
    G4Polycone *VolSolid = new G4Polycone("Active_Volume",0,360*deg,n,zz,ri,ro);

    //Source Encapsulation
    n=0;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = zp + DeploymentHeight; n++;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = zp+DeploymentHeight+SourceHeight; n++;
  
    G4Polycone *VolSourceFull = new G4Polycone("FullSourceVolume",0,360*deg, n, zz, ri, ro);
    G4VSolid *VolSourceAcrylic = new G4SubtractionSolid("Source Inactive Volume", VolSourceFull, VolSolid, noRotation,G4ThreeVector(0,0,0));
    G4LogicalVolume *fLogSourceAcrylic = new G4LogicalVolume(VolSourceAcrylic, fMatAcrylic, "LogSourceAcrylic",0,0,0);
    fLogSourceAcrylic->SetVisAttributes(StColor);
    __attribute__((unused)) G4VPhysicalVolume *fPhySourceAcrylic = new G4PVPlacement( noRotation, G4ThreeVector(0,0,0), fLogSourceAcrylic, "Source Inactive Acrylic", logdetector, false, 0);
    
    //finish active source
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, G4ThreeVector(0,0,0), fLogContents, "Source Solid", logdetector, false, 0);

    //Set up Bounding Box for MC generation
    dBoundingBoxLength = -1;  //active area is 1mm in radius, 1.2mm in height

    dBBxlo = -SourceRadius + 1*mm ;
    dBBxhi = SourceRadius - 1*mm;
    dBBylo = -SourceRadius + 1*mm;
    dBByhi = SourceRadius - 1*mm;
    dBBzlo = zp + DeploymentHeight;
    dBBzhi = zp + DeploymentHeight + SourceHeight;
  }

  if (fSourceMaterialID == 1101){
    //SLB010, 152Eu (104926), 1mm active diameter in 25.4mm acrylic disk, 3.2mm thickness 
    //Source at 45mm above
    FoundID = true;
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    G4double ri[20];
    G4double ro[20];
    G4double zz[20];
    G4int n;

    //creating counting pot
    SG4CountingPot* VCPot = new SG4CountingPot();
    VCPot->SG4CountingPot::Init();
    VCPot->SG4CountingPot::BottomCenter = G4ThreeVector(0,0,zp);

    //define material used to fill counting pot. Use UG density N2
    G4double densityN2 = 1.43e-3 * g/cm3; //underground density
    G4double a = 14.0 * g/mole;
    G4Material *fMatN = new G4Material("N2", 7.0 , a , densityN2);
    //fMatN->AddElement(elN, n_atoms = 2);

    //Fill the pot so they are not null
    VCPot->SG4CountingPot::MakeAndFillPot(logdetector,1*mm,fMatN);
    VCPot->SG4CountingPot::ConstructPotLid(logdetector);

    //Source
    G4double DeploymentHeight = 45*mm; //Change this for different pos
    G4double BottomThickness = 1*mm;
    G4double SourceRadius = 25.4/2 *mm;
    G4double SourceHeight = 3.2*mm;
    G4double ActiveThickness = 1.2*mm; //from 3.2-1-1
   
    G4VisAttributes *StColor = new G4VisAttributes();
    StColor->SetColor(G4Color(0.0, 0.4, 0.0));

    //define source geometry however you want. Active volume 
    n=0; //# of z planes (will be 2 in our case)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = zp + DeploymentHeight + BottomThickness; n++; //zz=z-plane, increment n (finished plane)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = zp + DeploymentHeight + BottomThickness + ActiveThickness; n++; //zz=z-plane, increment n (finished plane)
    G4Polycone *VolSolid = new G4Polycone("Active_Volume",0,360*deg,n,zz,ri,ro);

    //Source Encapsulation
    n=0;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = zp + DeploymentHeight; n++;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = zp+DeploymentHeight+SourceHeight; n++;
  
    G4Polycone *VolSourceFull = new G4Polycone("FullSourceVolume",0,360*deg, n, zz, ri, ro);
    G4VSolid *VolSourceAcrylic = new G4SubtractionSolid("Source Inactive Volume", VolSourceFull, VolSolid, noRotation,G4ThreeVector(0,0,0));
    G4LogicalVolume *fLogSourceAcrylic = new G4LogicalVolume(VolSourceAcrylic, fMatAcrylic, "LogSourceAcrylic",0,0,0);
    fLogSourceAcrylic->SetVisAttributes(StColor);
    __attribute__((unused)) G4VPhysicalVolume *fPhySourceAcrylic = new G4PVPlacement( noRotation, G4ThreeVector(0,0,0), fLogSourceAcrylic, "Source Inactive Acrylic", logdetector, false, 0);
    
    //finish active source
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, G4ThreeVector(0,0,0), fLogContents, "Source Solid", logdetector, false, 0);

    //Set up Bounding Box for MC generation
    dBoundingBoxLength = -1;  //active area is 1mm in radius, 1.2mm in height

    dBBxlo = -SourceRadius + 1*mm ;
    dBBxhi = SourceRadius - 1*mm;
    dBBylo = -SourceRadius + 1*mm;
    dBByhi = SourceRadius - 1*mm;
    dBBzlo = zp + DeploymentHeight;
    dBBzhi = zp + DeploymentHeight + SourceHeight;
  }

  if (fSourceMaterialID == 1102){
    //SLB010, 152Eu (104926), 1mm active diameter in 25.4mm acrylic disk, 3.2mm thickness 
    //Source at 16mm above

    FoundID = true;
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    G4double ri[20];
    G4double ro[20];
    G4double zz[20];
    G4int n;

    //creating counting pot
    SG4CountingPot* VCPot = new SG4CountingPot();
    VCPot->SG4CountingPot::Init();
    VCPot->SG4CountingPot::BottomCenter = G4ThreeVector(0,0,zp-45*mm+18*mm);

    //Fill the pot so they are not null
    VCPot->SG4CountingPot::ConstructPotLid(logdetector);

    //Source
    G4double DeploymentHeight = 18*mm + 0.46*mm; //Change this for different pos
    G4double BottomThickness = 1*mm;
    G4double SourceRadius = 25.4/2 *mm;
    G4double SourceHeight = 3.2*mm;
    G4double ActiveThickness = 1.2*mm; //from 3.2-1-1
   
    G4VisAttributes *StColor = new G4VisAttributes();
    StColor->SetColor(G4Color(0.0, 0.4, 0.0));

    //define source geometry however you want. Active volume 
    n=0; //# of z planes (will be 2 in our case)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = zp + DeploymentHeight + BottomThickness; n++; //zz=z-plane, increment n (finished plane)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = zp + DeploymentHeight + BottomThickness + ActiveThickness; n++; //zz=z-plane, increment n (finished plane)
    G4Polycone *VolSolid = new G4Polycone("Active_Volume",0,360*deg,n,zz,ri,ro);

    //Source Encapsulation
    n=0;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = zp + DeploymentHeight; n++;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = zp+DeploymentHeight+SourceHeight; n++;
  
    G4Polycone *VolSourceFull = new G4Polycone("FullSourceVolume",0,360*deg, n, zz, ri, ro);
    G4VSolid *VolSourceAcrylic = new G4SubtractionSolid("Source Inactive Volume", VolSourceFull, VolSolid, noRotation,G4ThreeVector(0,0,0));
    G4LogicalVolume *fLogSourceAcrylic = new G4LogicalVolume(VolSourceAcrylic, fMatAcrylic, "LogSourceAcrylic",0,0,0);
    fLogSourceAcrylic->SetVisAttributes(StColor);
    __attribute__((unused)) G4VPhysicalVolume *fPhySourceAcrylic = new G4PVPlacement( noRotation, G4ThreeVector(0,0,0), fLogSourceAcrylic, "Source Inactive Acrylic", logdetector, false, 0);
    
    //finish active source
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, G4ThreeVector(0,0,0), fLogContents, "Source Solid", logdetector, false, 0);

    //Set up Bounding Box for MC generation
    dBoundingBoxLength = -1;  //active area is 1mm in radius, 1.2mm in height

    dBBxlo = -SourceRadius + 1*mm ;
    dBBxhi = SourceRadius - 1*mm;
    dBBylo = -SourceRadius + 1*mm;
    dBByhi = SourceRadius - 1*mm;
    dBBzlo = zp + DeploymentHeight;
    dBBzhi = zp + DeploymentHeight + SourceHeight;
  }

  if (fSourceMaterialID == 12){
    //SLB010, 152Eu (104926), 1mm active diameter in 25.4mm acrylic disk, 3.2mm thickness
    //152Eu 1.5" in front of detector with collimator (side)
    FoundID = true;
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
   
    //define a 90deg rotation matrix for collimator 
    G4RotationMatrix* xRot = new G4RotationMatrix;
    xRot->rotateX(M_PI/2*rad);

    //define variables
    G4double ri[20];
    G4double ro[20];
    G4double zz[20];
    G4int n;
    
    //define Collimator (stainless steel)
    G4double DeploymentHeight = 0.26*mm; //change this to change position of source
    G4double OutterRadius = 50.8/2*mm;
    G4double CavityRadius = 26/2*mm;
    G4double InnerRadius = 1.5/2*mm;
    //G4double Chamfer= 0.15875/2*mm;
    G4double CavityThickness = 3*mm;
    G4double TotalThickness = 13*mm;
    
    //Define Bottom center location for collimator 
    G4double zBottom = zp - 2.4*cm -45*mm + OutterRadius; //top pot (height of 45mm) is 24mm under top
    G4double yBottom = 38.1*mm + 21.85*mm + 52.5*mm + 2.5*mm - (TotalThickness/2); //from SG4SrcCountingPotSample.cxx
    G4ThreeVector LocalBottomCenter = G4ThreeVector(0,yBottom,zBottom); //change these values to move things around
    
    G4double densitySteel = 7.9*g/cm3;
    G4Material* fMatSteel = new G4Material("Steel",densitySteel,4);
    fMatSteel->AddElement(elCr, mass_fraction = 17.5 * perCent); 
    fMatSteel->AddElement(elFe, mass_fraction = 68.0 * perCent); 
    fMatSteel->AddElement(elNi, mass_fraction = 12.0 * perCent); 
    fMatSteel->AddElement(elMo, mass_fraction = 2.5 * perCent);
   
    //Define whole steel piece
    n=0;
    ri[n] = InnerRadius; ro[n] = OutterRadius;
    zz[n] = DeploymentHeight; n++;
    ri[n] = InnerRadius; ro[n] = OutterRadius;
    zz[n] = DeploymentHeight + TotalThickness; n++;
    G4Polycone *VolCollimatorFull = new G4Polycone("FullCollimatorVolume",0,360*deg,n,zz,ri,ro);
   
    //define collimator inner space 
    n=0;
    ri[n] = 0; ro[n] = CavityRadius;
    zz[n] = DeploymentHeight + TotalThickness - CavityThickness; n++;
    ri[n] = 0; ro[n] = CavityRadius;
    zz[n] = DeploymentHeight + TotalThickness; n++;
    G4Polycone *VolCollimatorCavity = new G4Polycone("CavityCollimatorVolume",0,360*deg,n,zz,ri,ro);
   
    /*define Chamfer
    n=0;
    ri[n] = 0; ro[n] = InnerRadius;
    zz[n] = zp + DeploymentHeight + TotalThickness - CavityThickness - Chamfer; n++;
    ri[n] = 0; ro[n] = Chamfer;
    zz[n] = zp + DeploymentHeight + TotalThickness - CavityThickness; n++;
    G4Polycone *VolChamfer= new G4Polycone("ChamferVolume",0,360*deg,n,zz,ri,ro);
    */

    //collimator attributes
    G4VisAttributes *StColorSteel = new G4VisAttributes();
    StColorSteel->SetColor(G4Color(0.58, 0.64, 0.64));

    //substract cavity from collimator
    G4VSolid *VolCollimator = new G4SubtractionSolid("Collimator Volume noChamfer", VolCollimatorFull, VolCollimatorCavity, noRotation, G4ThreeVector(0,0,0));
    //G4VSolid *VolCollimator = new G4SubtractionSolid("Collimator Volume", VolCollimator_noChamfer, VolChamfer, noRotation, G4ThreeVector(0,0,0));
    G4LogicalVolume *fLogCollimator = new G4LogicalVolume(VolCollimator, fMatSteel, "LogCollimator",0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyCollimator = new G4PVPlacement(xRot, LocalBottomCenter, fLogCollimator, "Complete Collimator", logdetector, false, 0);
    fLogCollimator->SetVisAttributes(StColorSteel);

    //define Acrylic button    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    //Source
    G4double BottomThickness = 1*mm;
    G4double SourceRadius = 25.4/2 *mm;
    G4double SourceHeight = 3.2*mm;
    G4double ActiveThickness = 1.2*mm; //from 3.2-1-1
   
    G4VisAttributes *StColor = new G4VisAttributes();
    StColor->SetColor(G4Color(0.0, 0.4, 0.0));

    //define source geometry however you want. Active volume 
    n=0; //# of z planes (will be 2 in our case)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = BottomThickness; n++; //zz=z-plane, increment n (finished plane)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = BottomThickness + ActiveThickness; n++; //zz=z-plane, increment n (finished plane)
    G4Polycone *VolSolid = new G4Polycone("Active_Volume",0,360*deg,n,zz,ri,ro);

    //Source Encapsulation
    n=0;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = 0; n++;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = SourceHeight; n++;
  
    G4Polycone *VolSourceFull = new G4Polycone("FullSourceVolume",0,360*deg, n, zz, ri, ro);
    G4VSolid *VolSourceAcrylic = new G4SubtractionSolid("Source Inactive Volume", VolSourceFull, VolSolid, noRotation,G4ThreeVector(0,0,0));
    G4LogicalVolume *fLogSourceAcrylic = new G4LogicalVolume(VolSourceAcrylic, fMatAcrylic, "LogSourceAcrylic",0,0,0);
    fLogSourceAcrylic->SetVisAttributes(StColor);
    __attribute__((unused)) G4VPhysicalVolume *fPhySourceAcrylic = new G4PVPlacement(xRot, LocalBottomCenter + G4ThreeVector(0,TotalThickness - CavityThickness,0), fLogSourceAcrylic, "Source Inactive Acrylic", logdetector, false, 0);
    
    //finish active source
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(xRot, LocalBottomCenter + G4ThreeVector(0,TotalThickness-CavityThickness,0), fLogContents, "Source Solid", logdetector, false, 0);

    //Set up Bounding Box for MC generation
    dBoundingBoxLength = -1;  //active area is 1mm in radius, 1.2mm in height

    dBBxlo = -SourceRadius + 1*mm ;
    dBBxhi = SourceRadius - 1*mm;
    dBBylo = yBottom + TotalThickness-CavityThickness - 2*mm;
    dBByhi = SourceHeight + yBottom + TotalThickness-CavityThickness + 2*mm;
    dBBzlo = zBottom - SourceRadius -1*mm;
    dBBzhi = zBottom + SourceRadius +1*mm;
  }
  

  if (fSourceMaterialID == 13){
    //SLB010, 152Eu (104926), 1mm active diameter in 25.4mm acrylic disk, 3.2mm thickness
    //152Eu in front of detector (on counting pot)
    FoundID = true;
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    //create geometry for counting bottles (construct creates the logical and physical volumes relevant to the Pot) Place them at zp (detector edge) and zp + 45mm (top of previous pot)
    G4double zBottom = zp - 2.4*cm; //top pot (height of 45mm) is 24mm under top
    G4double yBottom = (2*38.1)*mm + 21.85*mm + 52.5*mm + 2.5*mm; //from SG4SrcCountingPotSample.cxx
    G4ThreeVector LocalBottomCenter = G4ThreeVector(0,yBottom,zBottom); //change these values to move things around

    SG4CountingPot* VCPot = new SG4CountingPot(); 
    VCPot->SG4CountingPot::Init();  
    VCPot->SG4CountingPot::BottomCenter = LocalBottomCenter + G4ThreeVector(0,0,-45*mm);

    //define material used to fill counting pot. Use UG density N2
    G4double densityN2 = 1.43e-3 * g/cm3; //underground density
    G4double a = 14.0 * g/mole;
    G4Material *fMatN = new G4Material("N2", 7.0 , a , densityN2);
    //fMatN->AddElement(elN, n_atoms = 2);

    //Fill the pot so they are not null
    VCPot->SG4CountingPot::MakeAndFillPot(logdetector,1*mm,fMatN);
    VCPot->SG4CountingPot::ConstructPotLid(logdetector);

    //define Acrylic button    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    G4double ri[20];
    G4double ro[20];
    G4double zz[20];
    G4int n;

    //Source
    G4double BottomThickness = 1*mm;
    G4double SourceRadius = 25.4/2 *mm;
    G4double SourceHeight = 3.2*mm;
    G4double ActiveThickness = 1.2*mm; //from 3.2-1-1
   
    G4VisAttributes *StColor = new G4VisAttributes();
    StColor->SetColor(G4Color(0.0, 0.4, 0.0));

    //define source geometry however you want. Active volume 
    n=0; //# of z planes (will be 2 in our case)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = BottomThickness; n++; //zz=z-plane, increment n (finished plane)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = BottomThickness + ActiveThickness; n++; //zz=z-plane, increment n (finished plane)
    G4Polycone *VolSolid = new G4Polycone("Active_Volume",0,360*deg,n,zz,ri,ro);

    //Source Encapsulation
    n=0;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = 0; n++;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = SourceHeight; n++;
  
    G4Polycone *VolSourceFull = new G4Polycone("FullSourceVolume",0,360*deg, n, zz, ri, ro);
    G4VSolid *VolSourceAcrylic = new G4SubtractionSolid("Source Inactive Volume", VolSourceFull, VolSolid, noRotation,G4ThreeVector(0,0,0));
    G4LogicalVolume *fLogSourceAcrylic = new G4LogicalVolume(VolSourceAcrylic, fMatAcrylic, "LogSourceAcrylic",0,0,0);
    fLogSourceAcrylic->SetVisAttributes(StColor);
    __attribute__((unused)) G4VPhysicalVolume *fPhySourceAcrylic = new G4PVPlacement(noRotation, LocalBottomCenter, fLogSourceAcrylic, "Source Inactive Acrylic", logdetector, false, 0);
    
    //finish active source
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, LocalBottomCenter, fLogContents, "Source Solid", logdetector, false, 0);

    //Set up Bounding Box for MC generation
    dBoundingBoxLength = -1;  //active area is 1mm in radius, 1.2mm in height

    dBBxlo = -SourceRadius + 1*mm ;
    dBBxhi = SourceRadius - 1*mm;
    dBBylo = -SourceRadius + 1*mm + yBottom;
    dBByhi = SourceRadius - 1*mm + yBottom;
    dBBzlo = zBottom;
    dBBzhi = zBottom + SourceHeight;
  }
  
  if (fSourceMaterialID == 1301){
    //SLB010, 152Eu (104926), 1mm active diameter in 25.4mm acrylic disk, 3.2mm thickness
    //152Eu in front of detector (on counting pot)
    FoundID = true;
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    //create geometry for counting bottles (construct creates the logical and physical volumes relevant to the Pot) Place them at zp (detector edge) and zp + 45mm (top of previous pot)
    G4double zBottom = zp - 2.4*cm; //top pot (height of 45mm) is 24mm under top
    G4double yBottom = 38.1*mm + 21.85*mm + 52.5*mm + 2.5*mm; //from SG4SrcCountingPotSample.cxx
    G4ThreeVector LocalBottomCenter = G4ThreeVector(0,yBottom,zBottom); //change these values to move things around

    SG4CountingPot* VCPot = new SG4CountingPot(); 
    VCPot->SG4CountingPot::Init();  
    VCPot->SG4CountingPot::BottomCenter = LocalBottomCenter + G4ThreeVector(0,0,-45*mm);

    //define material used to fill counting pot. Use UG density N2
    G4double densityN2 = 1.43e-3 * g/cm3; //underground density
    G4double a = 14.0 * g/mole;
    G4Material *fMatN = new G4Material("N2", 7.0 , a , densityN2);
    //fMatN->AddElement(elN, n_atoms = 2);

    //Fill the pot so they are not null
    VCPot->SG4CountingPot::MakeAndFillPot(logdetector,1*mm,fMatN);
    VCPot->SG4CountingPot::ConstructPotLid(logdetector);

    //define Acrylic button    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    G4double ri[20];
    G4double ro[20];
    G4double zz[20];
    G4int n;

    //Source
    G4double BottomThickness = 1*mm;
    G4double SourceRadius = 25.4/2 *mm;
    G4double SourceHeight = 3.2*mm;
    G4double ActiveThickness = 1.2*mm; //from 3.2-1-1
   
    G4VisAttributes *StColor = new G4VisAttributes();
    StColor->SetColor(G4Color(0.0, 0.4, 0.0));

    //define source geometry however you want. Active volume 
    n=0; //# of z planes (will be 2 in our case)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = BottomThickness; n++; //zz=z-plane, increment n (finished plane)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = BottomThickness + ActiveThickness; n++; //zz=z-plane, increment n (finished plane)
    G4Polycone *VolSolid = new G4Polycone("Active_Volume",0,360*deg,n,zz,ri,ro);

    //Source Encapsulation
    n=0;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = 0; n++;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = SourceHeight; n++;
  
    G4Polycone *VolSourceFull = new G4Polycone("FullSourceVolume",0,360*deg, n, zz, ri, ro);
    G4VSolid *VolSourceAcrylic = new G4SubtractionSolid("Source Inactive Volume", VolSourceFull, VolSolid, noRotation,G4ThreeVector(0,0,0));
    G4LogicalVolume *fLogSourceAcrylic = new G4LogicalVolume(VolSourceAcrylic, fMatAcrylic, "LogSourceAcrylic",0,0,0);
    fLogSourceAcrylic->SetVisAttributes(StColor);
    __attribute__((unused)) G4VPhysicalVolume *fPhySourceAcrylic = new G4PVPlacement(noRotation, LocalBottomCenter, fLogSourceAcrylic, "Source Inactive Acrylic", logdetector, false, 0);
    
    //finish active source
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, LocalBottomCenter, fLogContents, "Source Solid", logdetector, false, 0);

    //Set up Bounding Box for MC generation
    dBoundingBoxLength = -1;  //active area is 1mm in radius, 1.2mm in height

    dBBxlo = -SourceRadius + 1*mm ;
    dBBxhi = SourceRadius - 1*mm;
    dBBylo = -SourceRadius + 1*mm + yBottom;
    dBByhi = SourceRadius - 1*mm + yBottom;
    dBBzlo = zBottom;
    dBBzhi = zBottom + SourceHeight;
  }

  if (fSourceMaterialID == 14){
    //SLB010, 152Eu (104926), 1mm active diameter in 25.4mm acrylic disk, 3.2mm thickness
    //With collimator 1.6cm above
    FoundID = true;
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    //define variables
    G4double ri[20];
    G4double ro[20];
    G4double zz[20];
    G4int n;

    //create geometry for counting bottle (construct creates the logical and physical volumes relevant to the Pot. Put counting bottle at zp (detector's edge)
    SG4CountingPot* VCLid = new SG4CountingPot(); 
    VCLid->SG4CountingPot::Init();  
    VCLid->SG4CountingPot::BottomCenter = G4ThreeVector(0,0,zp-45*mm+18*mm);

    VCLid->SG4CountingPot::ConstructPotLid(logdetector);
    
    //define Collimator (stainless steel)
    G4double DeploymentHeight = 18*mm + 0.46*mm; //change this to change position of source
    G4double OutterRadius = 50.8/2*mm;
    G4double CavityRadius = 26/2*mm;
    G4double InnerRadius = 1.5/2*mm;
//    G4double Chamfer= 0.15875/2*mm;
    G4double CavityThickness = 3*mm;
    G4double TotalThickness = 13*mm;
    
    G4double densitySteel = 8.03*g/cm3;
    G4Material* fMatSteel = new G4Material("Steel",densitySteel,4);
    fMatSteel->AddElement(elCr, mass_fraction = 17.5 * perCent); 
    fMatSteel->AddElement(elFe, mass_fraction = 68.0 * perCent); 
    fMatSteel->AddElement(elNi, mass_fraction = 12.0 * perCent); 
    fMatSteel->AddElement(elMo, mass_fraction = 2.5 * perCent);
   
    //Define whole steel piece
    n=0;
    ri[n] = InnerRadius; ro[n] = OutterRadius;
    zz[n] = zp + DeploymentHeight; n++;
    ri[n] = InnerRadius; ro[n] = OutterRadius;
    zz[n] = zp + DeploymentHeight + TotalThickness; n++;
    G4Polycone *VolCollimatorFull = new G4Polycone("FullCollimatorVolume",0,360*deg,n,zz,ri,ro);
   
    //define collimator inner space 
    n=0;
    ri[n] = 0; ro[n] = CavityRadius;
    zz[n] = zp + DeploymentHeight + TotalThickness - CavityThickness; n++;
    ri[n] = 0; ro[n] = CavityRadius;
    zz[n] = zp + DeploymentHeight + TotalThickness; n++;
    G4Polycone *VolCollimatorCavity = new G4Polycone("CavityCollimatorVolume",0,360*deg,n,zz,ri,ro);
   
    /*define Chamfer
    n=0;
    ri[n] = 0; ro[n] = InnerRadius;
    zz[n] = zp + DeploymentHeight + TotalThickness - CavityThickness - Chamfer; n++;
    ri[n] = 0; ro[n] = Chamfer;
    zz[n] = zp + DeploymentHeight + TotalThickness - CavityThickness; n++;
    G4Polycone *VolChamfer= new G4Polycone("ChamferVolume",0,360*deg,n,zz,ri,ro);
    */

    //collimator attributes
    G4VisAttributes *StColorSteel = new G4VisAttributes();
    StColorSteel->SetColor(G4Color(0.58, 0.64, 0.64));

    //substract cavity from collimator
    G4VSolid *VolCollimator = new G4SubtractionSolid("Collimator Volume noChamfer", VolCollimatorFull, VolCollimatorCavity, noRotation, G4ThreeVector(0,0,0));
    //G4VSolid *VolCollimator = new G4SubtractionSolid("Collimator Volume", VolCollimator_noChamfer, VolChamfer, noRotation, G4ThreeVector(0,0,0));
    G4LogicalVolume *fLogCollimator = new G4LogicalVolume(VolCollimator, fMatSteel, "LogCollimator",0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyCollimator = new G4PVPlacement(noRotation, G4ThreeVector(0,0,0), fLogCollimator, "Complete Collimator", logdetector, false, 0);
    fLogCollimator->SetVisAttributes(StColorSteel);
     
    //define Acrylic button    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    //Source
    G4double SourceDeploymentHeight = DeploymentHeight + TotalThickness - CavityThickness; 
    G4double BottomThickness = 1*mm;
    G4double SourceRadius = 25.4/2 *mm;
    G4double SourceHeight = 3.2*mm;
    G4double ActiveThickness = 1.2*mm; //from 3.2-1-1
   
    G4VisAttributes *StColor = new G4VisAttributes();
    StColor->SetColor(G4Color(0.0, 0.4, 0.0));

    //define source geometry however you want. Active volume 
    n=0; //# of z planes (will be 2 in our case)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = zp + SourceDeploymentHeight + BottomThickness; n++; //zz=z-plane, increment n (finished plane)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = zp + SourceDeploymentHeight + BottomThickness + ActiveThickness; n++; //zz=z-plane, increment n (finished plane)
    G4Polycone *VolSolid = new G4Polycone("Active_Volume",0,360*deg,n,zz,ri,ro);

    //Source Encapsulation
    n=0;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = zp + SourceDeploymentHeight; n++;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = zp + SourceDeploymentHeight + SourceHeight; n++;
  
    G4Polycone *VolSourceFull = new G4Polycone("FullSourceVolume",0,360*deg, n, zz, ri, ro);
    G4VSolid *VolSourceAcrylic = new G4SubtractionSolid("Source Inactive Volume", VolSourceFull, VolSolid, noRotation,G4ThreeVector(0,0,0));
    G4LogicalVolume *fLogSourceAcrylic = new G4LogicalVolume(VolSourceAcrylic, fMatAcrylic, "LogSourceAcrylic",0,0,0);
    fLogSourceAcrylic->SetVisAttributes(StColor);
    __attribute__((unused)) G4VPhysicalVolume *fPhySourceAcrylic = new G4PVPlacement( noRotation, G4ThreeVector(0,0,0), fLogSourceAcrylic, "Source Inactive Acrylic", logdetector, false, 0);
    
    //finish active source
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, G4ThreeVector(0,0,0), fLogContents, "Source Solid", logdetector, false, 0);

    //Set up Bounding Box for MC generation
    dBoundingBoxLength = -1;  //active area is 1mm in radius, 1.2mm in height


    dBBxlo = -SourceRadius + 1*mm ;
    dBBxhi = SourceRadius - 1*mm;
    dBBylo = -SourceRadius + 1*mm;
    dBByhi = SourceRadius - 1*mm;
    dBBzlo = zp + SourceDeploymentHeight;
    dBBzhi = zp + SourceDeploymentHeight + SourceHeight;
  }

  if (fSourceMaterialID == 15){
    //SLB010, 152Eu (104926), 1mm active diameter in 25.4mm acrylic disk, 3.2mm thickness
    //With collimator at 45mm above
    FoundID = true;
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    //create geometry for counting bottle (construct creates the logical and physical volumes relevant to the Pot. Put counting bottle at zp (detector's edge)
    SG4CountingPot* VCPot = new SG4CountingPot(); 
    VCPot->SG4CountingPot::Init();  
    VCPot->SG4CountingPot::BottomCenter = G4ThreeVector(0,0,zp);

    //Create material to fill pot (use N2 at UG density)
    G4double densityN2 = 1.43e-3 * g/cm3; //underground density
    G4double a = 14.0 * g/mole;
    G4Material *fMatN = new G4Material("N2", 7.0 , a , densityN2);
    //fMatN->AddElement(elN, n_atoms = 2);

    //Fill the counting pot so its not null
    VCPot->SG4CountingPot::MakeAndFillPot(logdetector,1*mm,fMatN);
    VCPot->SG4CountingPot::ConstructPotLid(logdetector);

    //define variables
    G4double ri[20];
    G4double ro[20];
    G4double zz[20];
    G4int n;
    
    //define Collimator (stainless steel)
    G4double DeploymentHeight = 45*mm + 0.26*mm; //change this to change position of source
    G4double OutterRadius = 50.8/2*mm;
    G4double CavityRadius = 26/2*mm;
    G4double InnerRadius = 1.5/2*mm;
    //G4double Chamfer= 0.15875/2*mm;
    G4double CavityThickness = 3*mm;
    G4double TotalThickness = 13*mm;
    
    G4double densitySteel = 8.03*g/cm3;
    G4Material* fMatSteel = new G4Material("Steel",densitySteel,4);
    fMatSteel->AddElement(elCr, mass_fraction = 17.5 * perCent); 
    fMatSteel->AddElement(elFe, mass_fraction = 68.0 * perCent); 
    fMatSteel->AddElement(elNi, mass_fraction = 12.0 * perCent); 
    fMatSteel->AddElement(elMo, mass_fraction = 2.5 * perCent);
   
    //Define whole steel piece
    n=0;
    ri[n] = InnerRadius; ro[n] = OutterRadius;
    zz[n] = zp + DeploymentHeight; n++;
    ri[n] = InnerRadius; ro[n] = OutterRadius;
    zz[n] = zp + DeploymentHeight + TotalThickness; n++;
    G4Polycone *VolCollimatorFull = new G4Polycone("FullCollimatorVolume",0,360*deg,n,zz,ri,ro);
   
    //define collimator inner space 
    n=0;
    ri[n] = 0; ro[n] = CavityRadius;
    zz[n] = zp + DeploymentHeight + TotalThickness - CavityThickness; n++;
    ri[n] = 0; ro[n] = CavityRadius;
    zz[n] = zp + DeploymentHeight + TotalThickness; n++;
    G4Polycone *VolCollimatorCavity = new G4Polycone("CavityCollimatorVolume",0,360*deg,n,zz,ri,ro);
   
    /*define Chamfer
    n=0;
    ri[n] = 0; ro[n] = InnerRadius;
    zz[n] = zp + DeploymentHeight + TotalThickness - CavityThickness - Chamfer; n++;
    ri[n] = 0; ro[n] = Chamfer;
    zz[n] = zp + DeploymentHeight + TotalThickness - CavityThickness; n++;
    G4Polycone *VolChamfer= new G4Polycone("ChamferVolume",0,360*deg,n,zz,ri,ro);
    */

    //collimator attributes
    G4VisAttributes *StColorSteel = new G4VisAttributes();
    StColorSteel->SetColor(G4Color(0.58, 0.64, 0.64));

    //substract cavity from collimator
    G4VSolid *VolCollimator = new G4SubtractionSolid("Collimator Volume noChamfer", VolCollimatorFull, VolCollimatorCavity, noRotation, G4ThreeVector(0,0,0));
    //G4VSolid *VolCollimator = new G4SubtractionSolid("Collimator Volume", VolCollimator_noChamfer, VolChamfer, noRotation, G4ThreeVector(0,0,0));
    G4LogicalVolume *fLogCollimator = new G4LogicalVolume(VolCollimator, fMatSteel, "LogCollimator",0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyCollimator = new G4PVPlacement(noRotation, G4ThreeVector(0,0,0), fLogCollimator, "Complete Collimator", logdetector, false, 0);
    fLogCollimator->SetVisAttributes(StColorSteel);
     
    //define Acrylic button    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    //Source
    G4double SourceDeploymentHeight = DeploymentHeight + TotalThickness - CavityThickness; 
    G4double BottomThickness = 1*mm;
    G4double SourceRadius = 25.4/2 *mm;
    G4double SourceHeight = 3.2*mm;
    G4double ActiveThickness = 1.2*mm; //from 3.2-1-1
   
    G4VisAttributes *StColor = new G4VisAttributes();
    StColor->SetColor(G4Color(0.0, 0.4, 0.0));

    //define source geometry however you want. Active volume 
    n=0; //# of z planes (will be 2 in our case)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = zp + SourceDeploymentHeight + BottomThickness; n++; //zz=z-plane, increment n (finished plane)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = zp + SourceDeploymentHeight + BottomThickness + ActiveThickness; n++; //zz=z-plane, increment n (finished plane)
    G4Polycone *VolSolid = new G4Polycone("Active_Volume",0,360*deg,n,zz,ri,ro);

    //Source Encapsulation
    n=0;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = zp + SourceDeploymentHeight; n++;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = zp + SourceDeploymentHeight + SourceHeight; n++;
  
    G4Polycone *VolSourceFull = new G4Polycone("FullSourceVolume",0,360*deg, n, zz, ri, ro);
    G4VSolid *VolSourceAcrylic = new G4SubtractionSolid("Source Inactive Volume", VolSourceFull, VolSolid, noRotation,G4ThreeVector(0,0,0));
    G4LogicalVolume *fLogSourceAcrylic = new G4LogicalVolume(VolSourceAcrylic, fMatAcrylic, "LogSourceAcrylic",0,0,0);
    fLogSourceAcrylic->SetVisAttributes(StColor);
    __attribute__((unused)) G4VPhysicalVolume *fPhySourceAcrylic = new G4PVPlacement( noRotation, G4ThreeVector(0,0,0), fLogSourceAcrylic, "Source Inactive Acrylic", logdetector, false, 0);
    
    //finish active source
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, G4ThreeVector(0,0,0), fLogContents, "Source Solid", logdetector, false, 0);

    //Set up Bounding Box for MC generation
    dBoundingBoxLength = -1;  //active area is 1mm in radius, 1.2mm in height


    dBBxlo = -SourceRadius + 1*mm ;
    dBBxhi = SourceRadius - 1*mm;
    dBBylo = -SourceRadius + 1*mm;
    dBByhi = SourceRadius - 1*mm;
    dBBzlo = zp + SourceDeploymentHeight;
    dBBzhi = zp + SourceDeploymentHeight + SourceHeight;
  }
  
  if (fSourceMaterialID == 16){
    //SLB010, 152Eu (104926), 1mm active diameter in 25.4mm acrylic disk, 3.2mm thickness
    //With collimator 90mm above
    FoundID = true;
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    //create geometry for counting bottle (construct creates the logical and physical volumes relevant to the Pot. Put counting bottle at zp (detector's edge)
    SG4CountingPot* VCPot = new SG4CountingPot(); 
    VCPot->SG4CountingPot::Init();  
    VCPot->SG4CountingPot::BottomCenter = G4ThreeVector(0,0,zp);
    SG4CountingPot* VCPot2 = new SG4CountingPot(); 
    VCPot2->SG4CountingPot::Init();  
    VCPot2->SG4CountingPot::BottomCenter = G4ThreeVector(0,0,zp+45*mm);

    //Create material to fill pot (use N2 at UG density)
    G4double densityN2 = 1.43e-3 * g/cm3; //underground density
    G4double a = 14.0 * g/mole;
    G4Material *fMatN = new G4Material("N2", 7.0 , a , densityN2);
    //fMatN->AddElement(elN, n_atoms = 2);

    //Fill the counting pot so its not null
    VCPot->SG4CountingPot::MakeAndFillPot(logdetector,1*mm,fMatN);
    VCPot2->SG4CountingPot::MakeAndFillPot(logdetector,1*mm,fMatN);
    VCPot->SG4CountingPot::ConstructPotLid(logdetector);
    VCPot2->SG4CountingPot::ConstructPotLid(logdetector);

    //define variables
    G4double ri[20];
    G4double ro[20];
    G4double zz[20];
    G4int n;
    
    //define Collimator (stainless steel)
    G4double DeploymentHeight = 90*mm + 0.26*mm; //change this to change position of source
    G4double OutterRadius = 50.8/2*mm;
    G4double CavityRadius = 26/2*mm;
    G4double InnerRadius = 1.5/2*mm;
    //G4double Chamfer= 0.15875/2*mm;
    G4double CavityThickness = 3*mm;
    G4double TotalThickness = 13*mm;
    
    G4double densitySteel = 7.9*g/cm3;
    G4Material* fMatSteel = new G4Material("Steel",densitySteel,4);
    fMatSteel->AddElement(elCr, mass_fraction = 17.5 * perCent); 
    fMatSteel->AddElement(elFe, mass_fraction = 68.0 * perCent); 
    fMatSteel->AddElement(elNi, mass_fraction = 12.0 * perCent); 
    fMatSteel->AddElement(elMo, mass_fraction = 2.5 * perCent);
   
    //Define whole steel piece
    n=0;
    ri[n] = InnerRadius; ro[n] = OutterRadius;
    zz[n] = zp + DeploymentHeight; n++;
    ri[n] = InnerRadius; ro[n] = OutterRadius;
    zz[n] = zp + DeploymentHeight + TotalThickness; n++;
    G4Polycone *VolCollimatorFull = new G4Polycone("FullCollimatorVolume",0,360*deg,n,zz,ri,ro);
   
    //define collimator inner space 
    n=0;
    ri[n] = 0; ro[n] = CavityRadius;
    zz[n] = zp + DeploymentHeight + TotalThickness - CavityThickness; n++;
    ri[n] = 0; ro[n] = CavityRadius;
    zz[n] = zp + DeploymentHeight + TotalThickness; n++;
    G4Polycone *VolCollimatorCavity = new G4Polycone("CavityCollimatorVolume",0,360*deg,n,zz,ri,ro);
   
    /*define Chamfer
    n=0;
    ri[n] = 0; ro[n] = InnerRadius;
    zz[n] = zp + DeploymentHeight + TotalThickness - CavityThickness - Chamfer; n++;
    ri[n] = 0; ro[n] = Chamfer;
    zz[n] = zp + DeploymentHeight + TotalThickness - CavityThickness; n++;
    G4Polycone *VolChamfer= new G4Polycone("ChamferVolume",0,360*deg,n,zz,ri,ro);
    */

    //collimator attributes
    G4VisAttributes *StColorSteel = new G4VisAttributes();
    StColorSteel->SetColor(G4Color(0.58, 0.64, 0.64));

    //substract cavity from collimator
    G4VSolid *VolCollimator = new G4SubtractionSolid("Collimator Volume noChamfer", VolCollimatorFull, VolCollimatorCavity, noRotation, G4ThreeVector(0,0,0));
    //G4VSolid *VolCollimator = new G4SubtractionSolid("Collimator Volume", VolCollimator_noChamfer, VolChamfer, noRotation, G4ThreeVector(0,0,0));
    G4LogicalVolume *fLogCollimator = new G4LogicalVolume(VolCollimator, fMatSteel, "LogCollimator",0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyCollimator = new G4PVPlacement(noRotation, G4ThreeVector(0,0,0), fLogCollimator, "Complete Collimator", logdetector, false, 0);
    fLogCollimator->SetVisAttributes(StColorSteel);
     
    //define Acrylic button    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    //Source
    G4double SourceDeploymentHeight = DeploymentHeight + TotalThickness - CavityThickness; 
    G4double BottomThickness = 1*mm;
    G4double SourceRadius = 25.4/2 *mm;
    G4double SourceHeight = 3.2*mm;
    G4double ActiveThickness = 1.2*mm; //from 3.2-1-1
   
    G4VisAttributes *StColor = new G4VisAttributes();
    StColor->SetColor(G4Color(0.0, 0.4, 0.0));

    //define source geometry however you want. Active volume 
    n=0; //# of z planes (will be 2 in our case)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = zp + SourceDeploymentHeight + BottomThickness; n++; //zz=z-plane, increment n (finished plane)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = zp + SourceDeploymentHeight + BottomThickness + ActiveThickness; n++; //zz=z-plane, increment n (finished plane)
    G4Polycone *VolSolid = new G4Polycone("Active_Volume",0,360*deg,n,zz,ri,ro);

    //Source Encapsulation
    n=0;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = zp + SourceDeploymentHeight; n++;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = zp + SourceDeploymentHeight + SourceHeight; n++;
  
    G4Polycone *VolSourceFull = new G4Polycone("FullSourceVolume",0,360*deg, n, zz, ri, ro);
    G4VSolid *VolSourceAcrylic = new G4SubtractionSolid("Source Inactive Volume", VolSourceFull, VolSolid, noRotation,G4ThreeVector(0,0,0));
    G4LogicalVolume *fLogSourceAcrylic = new G4LogicalVolume(VolSourceAcrylic, fMatAcrylic, "LogSourceAcrylic",0,0,0);
    fLogSourceAcrylic->SetVisAttributes(StColor);
    __attribute__((unused)) G4VPhysicalVolume *fPhySourceAcrylic = new G4PVPlacement( noRotation, G4ThreeVector(0,0,0), fLogSourceAcrylic, "Source Inactive Acrylic", logdetector, false, 0);
    
    //finish active source
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, G4ThreeVector(0,0,0), fLogContents, "Source Solid", logdetector, false, 0);

    //Set up Bounding Box for MC generation
    dBoundingBoxLength = -1;  //active area is 1mm in radius, 1.2mm in height


    dBBxlo = -SourceRadius + 1*mm ;
    dBBxhi = SourceRadius - 1*mm;
    dBBylo = -SourceRadius + 1*mm;
    dBByhi = SourceRadius - 1*mm;
    dBBzlo = zp + SourceDeploymentHeight;
    dBBzhi = zp + SourceDeploymentHeight + SourceHeight;
  }

  if (fSourceMaterialID == 17){
    //SLB010, 152Eu (104926), 1mm active diameter in 25.4mm acrylic disk, 3.2mm thickness
    //152Eu in front of detector with collimator
    FoundID = true;
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
   
    //defining a 90deg rotation matrix  
    G4RotationMatrix* xRot = new G4RotationMatrix;
    xRot->rotateX(M_PI/2*rad);

    //define variables
    G4double ri[20];
    G4double ro[20];
    G4double zz[20];
    G4int n;
    
    //define Collimator (stainless steel)
    G4double DeploymentHeight = 0.26*mm; //change this to change position of source
    G4double OutterRadius = 50.8/2*mm;
    G4double CavityRadius = 26/2*mm;
    G4double InnerRadius = 1.5/2*mm;
    //G4double Chamfer= 0.15875/2*mm;
    G4double CavityThickness = 3*mm;
    G4double TotalThickness = 13*mm;
    
    //Define Bottom center location for collimator 
    G4double zBottom = zp - 2.4*cm -45*mm + OutterRadius; //top pot (height of 45mm) is 24mm under top
    G4double yBottom = 2*38.1*mm + 21.85*mm + 52.5*mm + 2.5*mm - (TotalThickness/2); //from SG4SrcCountingPotSample.cxx
    G4ThreeVector LocalBottomCenter = G4ThreeVector(0,yBottom,zBottom); //change these values to move things around

    //defining steel material of collimator
    G4double densitySteel = 7.9*g/cm3;
    G4Material* fMatSteel = new G4Material("Steel",densitySteel,4);
    fMatSteel->AddElement(elCr, mass_fraction = 17.5 * perCent); 
    fMatSteel->AddElement(elFe, mass_fraction = 68.0 * perCent); 
    fMatSteel->AddElement(elNi, mass_fraction = 12.0 * perCent); 
    fMatSteel->AddElement(elMo, mass_fraction = 2.5 * perCent);
   
    //Define whole steel piece
    n=0;
    ri[n] = InnerRadius; ro[n] = OutterRadius;
    zz[n] = DeploymentHeight; n++;
    ri[n] = InnerRadius; ro[n] = OutterRadius;
    zz[n] = DeploymentHeight + TotalThickness; n++;
    G4Polycone *VolCollimatorFull = new G4Polycone("FullCollimatorVolume",0,360*deg,n,zz,ri,ro);
   
    //define collimator inner space 
    n=0;
    ri[n] = 0; ro[n] = CavityRadius;
    zz[n] = DeploymentHeight + TotalThickness - CavityThickness; n++;
    ri[n] = 0; ro[n] = CavityRadius;
    zz[n] = DeploymentHeight + TotalThickness; n++;
    G4Polycone *VolCollimatorCavity = new G4Polycone("CavityCollimatorVolume",0,360*deg,n,zz,ri,ro);
   
    /*define Chamfer
    n=0;
    ri[n] = 0; ro[n] = InnerRadius;
    zz[n] = zp + DeploymentHeight + TotalThickness - CavityThickness - Chamfer; n++;
    ri[n] = 0; ro[n] = Chamfer;
    zz[n] = zp + DeploymentHeight + TotalThickness - CavityThickness; n++;
    G4Polycone *VolChamfer= new G4Polycone("ChamferVolume",0,360*deg,n,zz,ri,ro);
    */

    //collimator attributes
    G4VisAttributes *StColorSteel = new G4VisAttributes();
    StColorSteel->SetColor(G4Color(0.58, 0.64, 0.64));

    //substract cavity from collimator
    G4VSolid *VolCollimator = new G4SubtractionSolid("Collimator Volume noChamfer", VolCollimatorFull, VolCollimatorCavity, noRotation, G4ThreeVector(0,0,0));
    //G4VSolid *VolCollimator = new G4SubtractionSolid("Collimator Volume", VolCollimator_noChamfer, VolChamfer, noRotation, G4ThreeVector(0,0,0));
    G4LogicalVolume *fLogCollimator = new G4LogicalVolume(VolCollimator, fMatSteel, "LogCollimator",0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyCollimator = new G4PVPlacement(xRot, LocalBottomCenter, fLogCollimator, "Complete Collimator", logdetector, false, 0);
    fLogCollimator->SetVisAttributes(StColorSteel);

    //define Acrylic button    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    //Source
    G4double BottomThickness = 1*mm;
    G4double SourceRadius = 25.4/2 *mm;
    G4double SourceHeight = 3.2*mm;
    G4double ActiveThickness = 1.2*mm; //from 3.2-1-1
   
    G4VisAttributes *StColor = new G4VisAttributes();
    StColor->SetColor(G4Color(0.0, 0.4, 0.0));

    //define source geometry however you want. Active volume 
    n=0; //# of z planes (will be 2 in our case)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = BottomThickness; n++; //zz=z-plane, increment n (finished plane)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = BottomThickness + ActiveThickness; n++; //zz=z-plane, increment n (finished plane)
    G4Polycone *VolSolid = new G4Polycone("Active_Volume",0,360*deg,n,zz,ri,ro);

    //Source Encapsulation
    n=0;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = 0; n++;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = SourceHeight; n++;
  
    G4Polycone *VolSourceFull = new G4Polycone("FullSourceVolume",0,360*deg, n, zz, ri, ro);
    G4VSolid *VolSourceAcrylic = new G4SubtractionSolid("Source Inactive Volume", VolSourceFull, VolSolid, noRotation,G4ThreeVector(0,0,0));
    G4LogicalVolume *fLogSourceAcrylic = new G4LogicalVolume(VolSourceAcrylic, fMatAcrylic, "LogSourceAcrylic",0,0,0);
    fLogSourceAcrylic->SetVisAttributes(StColor);
    __attribute__((unused)) G4VPhysicalVolume *fPhySourceAcrylic = new G4PVPlacement(xRot, LocalBottomCenter + G4ThreeVector(0,TotalThickness - CavityThickness,0), fLogSourceAcrylic, "Source Inactive Acrylic", logdetector, false, 0);
    
    //finish active source
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(xRot, LocalBottomCenter + G4ThreeVector(0,TotalThickness-CavityThickness,0), fLogContents, "Source Solid", logdetector, false, 0);

    //Set up Bounding Box for MC generation
    dBoundingBoxLength = -1;  //active area is 1mm in radius, 1.2mm in height

    dBBxlo = -SourceRadius + 1*mm ;
    dBBxhi = SourceRadius - 1*mm;
    dBBylo = yBottom + TotalThickness-CavityThickness - 2*mm;
    dBByhi = SourceHeight + yBottom + TotalThickness-CavityThickness + 2*mm;
    dBBzlo = zBottom - SourceRadius -1*mm;
    dBBzhi = zBottom + SourceRadius +1*mm;
  }

  if (fSourceMaterialID == 18){
    //SLB010, 152Eu (104926), 1mm active diameter in 25.4mm acrylic disk, 3.2mm thickness
    //152Eu in front of detector with collimator (down)
    FoundID = true;
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    //create geometry for counting bottles (construct creates the logical and physical volumes relevant to the Pot) Place them at zp (detector edge) and zp + 45mm (top of previous pot)
    G4double zBottom = zp - 2.4*cm; //top pot (height of 45mm) is 24mm under top
    G4double yBottom = 38.1*mm + 21.85*mm + 52.5*mm + 2.5*mm; //from SG4SrcCountingPotSample.cxx
    G4ThreeVector LocalBottomCenter = G4ThreeVector(0,yBottom,zBottom); //change these values to move things around

    SG4CountingPot* VCPot = new SG4CountingPot(); 
    VCPot->SG4CountingPot::Init();  
    VCPot->SG4CountingPot::BottomCenter = LocalBottomCenter + G4ThreeVector(0,0,-45*mm);

    //define material used to fill counting pot. Use UG density N2
    G4double densityN2 = 1.43e-3 * g/cm3; //underground density
    G4double a = 14.0 * g/mole;
    G4Material *fMatN = new G4Material("N2", 7.0 , a , densityN2);
    //fMatN->AddElement(elN, n_atoms = 2);

    //Fill the pot so they are not null
    VCPot->SG4CountingPot::MakeAndFillPot(logdetector,1*mm,fMatN);
    VCPot->SG4CountingPot::ConstructPotLid(logdetector);

    //define variables
    G4double ri[20];
    G4double ro[20];
    G4double zz[20];
    G4int n;
    
    //define Collimator (stainless steel)
    G4double DeploymentHeight = 0.26*mm; //change this to change position of source
    G4double OutterRadius = 50.8/2*mm;
    G4double CavityRadius = 26/2*mm;
    G4double InnerRadius = 1.5/2*mm;
    //G4double Chamfer= 0.15875/2*mm;
    G4double CavityThickness = 3*mm;
    G4double TotalThickness = 13*mm;
    
    G4double densitySteel = 7.9*g/cm3;
    G4Material* fMatSteel = new G4Material("Steel",densitySteel,4);
    fMatSteel->AddElement(elCr, mass_fraction = 17.5 * perCent); 
    fMatSteel->AddElement(elFe, mass_fraction = 68.0 * perCent); 
    fMatSteel->AddElement(elNi, mass_fraction = 12.0 * perCent); 
    fMatSteel->AddElement(elMo, mass_fraction = 2.5 * perCent);
   
    //Define whole steel piece
    n=0;
    ri[n] = InnerRadius; ro[n] = OutterRadius;
    zz[n] = DeploymentHeight; n++;
    ri[n] = InnerRadius; ro[n] = OutterRadius;
    zz[n] = DeploymentHeight + TotalThickness; n++;
    G4Polycone *VolCollimatorFull = new G4Polycone("FullCollimatorVolume",0,360*deg,n,zz,ri,ro);
   
    //define collimator inner space 
    n=0;
    ri[n] = 0; ro[n] = CavityRadius;
    zz[n] = DeploymentHeight + TotalThickness - CavityThickness; n++;
    ri[n] = 0; ro[n] = CavityRadius;
    zz[n] = DeploymentHeight + TotalThickness; n++;
    G4Polycone *VolCollimatorCavity = new G4Polycone("CavityCollimatorVolume",0,360*deg,n,zz,ri,ro);
   
    /*define Chamfer
    n=0;
    ri[n] = 0; ro[n] = InnerRadius;
    zz[n] = zp + DeploymentHeight + TotalThickness - CavityThickness - Chamfer; n++;
    ri[n] = 0; ro[n] = Chamfer;
    zz[n] = zp + DeploymentHeight + TotalThickness - CavityThickness; n++;
    G4Polycone *VolChamfer= new G4Polycone("ChamferVolume",0,360*deg,n,zz,ri,ro);
    */

    //collimator attributes
    G4VisAttributes *StColorSteel = new G4VisAttributes();
    StColorSteel->SetColor(G4Color(0.58, 0.64, 0.64));

    //substract cavity from collimator
    G4VSolid *VolCollimator = new G4SubtractionSolid("Collimator Volume noChamfer", VolCollimatorFull, VolCollimatorCavity, noRotation, G4ThreeVector(0,0,0));
    //G4VSolid *VolCollimator = new G4SubtractionSolid("Collimator Volume", VolCollimator_noChamfer, VolChamfer, noRotation, G4ThreeVector(0,0,0));
    G4LogicalVolume *fLogCollimator = new G4LogicalVolume(VolCollimator, fMatSteel, "LogCollimator",0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyCollimator = new G4PVPlacement(noRotation, LocalBottomCenter, fLogCollimator, "Complete Collimator", logdetector, false, 0);
    fLogCollimator->SetVisAttributes(StColorSteel);

    //define Acrylic button    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    //Source
    G4double BottomThickness = 1*mm;
    G4double SourceRadius = 25.4/2 *mm;
    G4double SourceHeight = 3.2*mm;
    G4double ActiveThickness = 1.2*mm; //from 3.2-1-1
   
    G4VisAttributes *StColor = new G4VisAttributes();
    StColor->SetColor(G4Color(0.0, 0.4, 0.0));

    //define source geometry however you want. Active volume 
    n=0; //# of z planes (will be 2 in our case)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = BottomThickness; n++; //zz=z-plane, increment n (finished plane)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = BottomThickness + ActiveThickness; n++; //zz=z-plane, increment n (finished plane)
    G4Polycone *VolSolid = new G4Polycone("Active_Volume",0,360*deg,n,zz,ri,ro);

    //Source Encapsulation
    n=0;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = 0; n++;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = SourceHeight; n++;
  
    G4Polycone *VolSourceFull = new G4Polycone("FullSourceVolume",0,360*deg, n, zz, ri, ro);
    G4VSolid *VolSourceAcrylic = new G4SubtractionSolid("Source Inactive Volume", VolSourceFull, VolSolid, noRotation,G4ThreeVector(0,0,0));
    G4LogicalVolume *fLogSourceAcrylic = new G4LogicalVolume(VolSourceAcrylic, fMatAcrylic, "LogSourceAcrylic",0,0,0);
    fLogSourceAcrylic->SetVisAttributes(StColor);
    __attribute__((unused)) G4VPhysicalVolume *fPhySourceAcrylic = new G4PVPlacement(noRotation, LocalBottomCenter + G4ThreeVector(0,0,TotalThickness - CavityThickness), fLogSourceAcrylic, "Source Inactive Acrylic", logdetector, false, 0);
    
    //finish active source
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, LocalBottomCenter + G4ThreeVector(0,0,TotalThickness-CavityThickness), fLogContents, "Source Solid", logdetector, false, 0);

    //Set up Bounding Box for MC generation
    dBoundingBoxLength = -1;  //active area is 1mm in radius, 1.2mm in height

    dBBxlo = -SourceRadius + 1*mm ;
    dBBxhi = SourceRadius - 1*mm;
    dBBylo = -SourceRadius + 1*mm + yBottom;
    dBByhi = SourceRadius - 1*mm + yBottom;
    dBBzlo = zBottom + TotalThickness-CavityThickness;
    dBBzhi = zBottom + TotalThickness-CavityThickness + SourceHeight;
  }
  
  if (fSourceMaterialID == 19){
    //SLB010, 152Eu (104926), 1mm active diameter in 25.4mm acrylic disk, 3.2mm thickness
    //152Eu 1.5" in front of detector with collimator (side) on counting pot
    FoundID = true;
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
   
    //define a 90deg rotation matrix for collimator 
    G4RotationMatrix* xRot = new G4RotationMatrix;
    xRot->rotateX(M_PI/2*rad);

    //define variables
    G4double ri[20];
    G4double ro[20];
    G4double zz[20];
    G4int n;
    
    //define Collimator (stainless steel)
    G4double DeploymentHeight = 0.26*mm;
    G4double OutterRadius = 50.8/2*mm;
    G4double CavityRadius = 26/2*mm;
    G4double InnerRadius = 1.5/2*mm;
    //G4double Chamfer= 0.15875/2*mm;
    G4double CavityThickness = 3*mm;
    G4double TotalThickness = 13*mm;
    
    //Define Bottom center location for collimator 
    G4double zBottom = zp - 2.4*cm -45*mm + OutterRadius + 27.5514*mm; //top pot (height of 45mm) is 24mm under top
    G4double yBottom = 38.1*mm + 21.85*mm + 52.5*mm + 2.5*mm - (TotalThickness/2); //from SG4SrcCountingPotSample.cxx
    G4ThreeVector LocalBottomCenter = G4ThreeVector(0,yBottom,zBottom); //change these values to move things around
    
    G4double densitySteel = 7.9*g/cm3;
    G4Material* fMatSteel = new G4Material("Steel",densitySteel,4);
    fMatSteel->AddElement(elCr, mass_fraction = 17.5 * perCent); 
    fMatSteel->AddElement(elFe, mass_fraction = 68.0 * perCent); 
    fMatSteel->AddElement(elNi, mass_fraction = 12.0 * perCent); 
    fMatSteel->AddElement(elMo, mass_fraction = 2.5 * perCent);
   
    //Define whole steel piece
    n=0;
    ri[n] = InnerRadius; ro[n] = OutterRadius;
    zz[n] = DeploymentHeight; n++;
    ri[n] = InnerRadius; ro[n] = OutterRadius;
    zz[n] = DeploymentHeight + TotalThickness; n++;
    G4Polycone *VolCollimatorFull = new G4Polycone("FullCollimatorVolume",0,360*deg,n,zz,ri,ro);
   
    //define collimator inner space 
    n=0;
    ri[n] = 0; ro[n] = CavityRadius;
    zz[n] = DeploymentHeight + TotalThickness - CavityThickness; n++;
    ri[n] = 0; ro[n] = CavityRadius;
    zz[n] = DeploymentHeight + TotalThickness; n++;
    G4Polycone *VolCollimatorCavity = new G4Polycone("CavityCollimatorVolume",0,360*deg,n,zz,ri,ro);
   
    /*define Chamfer
    n=0;
    ri[n] = 0; ro[n] = InnerRadius;
    zz[n] = zp + DeploymentHeight + TotalThickness - CavityThickness - Chamfer; n++;
    ri[n] = 0; ro[n] = Chamfer;
    zz[n] = zp + DeploymentHeight + TotalThickness - CavityThickness; n++;
    G4Polycone *VolChamfer= new G4Polycone("ChamferVolume",0,360*deg,n,zz,ri,ro);
    */

    //collimator attributes
    G4VisAttributes *StColorSteel = new G4VisAttributes();
    StColorSteel->SetColor(G4Color(0.58, 0.64, 0.64));

    //substract cavity from collimator
    G4VSolid *VolCollimator = new G4SubtractionSolid("Collimator Volume noChamfer", VolCollimatorFull, VolCollimatorCavity, noRotation, G4ThreeVector(0,0,0));
    //G4VSolid *VolCollimator = new G4SubtractionSolid("Collimator Volume", VolCollimator_noChamfer, VolChamfer, noRotation, G4ThreeVector(0,0,0));
    G4LogicalVolume *fLogCollimator = new G4LogicalVolume(VolCollimator, fMatSteel, "LogCollimator",0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyCollimator = new G4PVPlacement(xRot, LocalBottomCenter, fLogCollimator, "Complete Collimator", logdetector, false, 0);
    fLogCollimator->SetVisAttributes(StColorSteel);

    //define Acrylic button    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    //Source
    G4double BottomThickness = 1*mm;
    G4double SourceRadius = 25.4/2 *mm;
    G4double SourceHeight = 3.2*mm;
    G4double ActiveThickness = 1.2*mm; //from 3.2-1-1
   
    G4VisAttributes *StColor = new G4VisAttributes();
    StColor->SetColor(G4Color(0.0, 0.4, 0.0));

    //define source geometry however you want. Active volume 
    n=0; //# of z planes (will be 2 in our case)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = BottomThickness; n++; //zz=z-plane, increment n (finished plane)
    ri[n] = 0*mm; ro[n] = 1*mm; //ri=inner radius; ro=outer radius
    zz[n] = BottomThickness + ActiveThickness; n++; //zz=z-plane, increment n (finished plane)
    G4Polycone *VolSolid = new G4Polycone("Active_Volume",0,360*deg,n,zz,ri,ro);

    //Source Encapsulation
    n=0;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = 0; n++;
    ri[n] = 0*mm; ro[n] = SourceRadius;
    zz[n] = SourceHeight; n++;
  
    G4Polycone *VolSourceFull = new G4Polycone("FullSourceVolume",0,360*deg, n, zz, ri, ro);
    G4VSolid *VolSourceAcrylic = new G4SubtractionSolid("Source Inactive Volume", VolSourceFull, VolSolid, noRotation,G4ThreeVector(0,0,0));
    G4LogicalVolume *fLogSourceAcrylic = new G4LogicalVolume(VolSourceAcrylic, fMatAcrylic, "LogSourceAcrylic",0,0,0);
    fLogSourceAcrylic->SetVisAttributes(StColor);
    __attribute__((unused)) G4VPhysicalVolume *fPhySourceAcrylic = new G4PVPlacement(xRot, LocalBottomCenter + G4ThreeVector(0,TotalThickness - CavityThickness,0), fLogSourceAcrylic, "Source Inactive Acrylic", logdetector, false, 0);
    
    //finish active source
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(xRot, LocalBottomCenter + G4ThreeVector(0,TotalThickness-CavityThickness,0), fLogContents, "Source Solid", logdetector, false, 0);

    //Set up Bounding Box for MC generation
    dBoundingBoxLength = -1;  //active area is 1mm in radius, 1.2mm in height

    dBBxlo = -SourceRadius + 1*mm ;
    dBBxhi = SourceRadius - 1*mm;
    dBBylo = yBottom + TotalThickness-CavityThickness - 2*mm;
    dBByhi = SourceHeight + yBottom + TotalThickness-CavityThickness + 2*mm;
    dBBzlo = zBottom - SourceRadius -1*mm;
    dBBzhi = zBottom + SourceRadius +1*mm;
  }

  if (fSourceMaterialID == 20){
    FoundID = true;
    //gopher Large Brass Screws 2903.6g on top of large acrylic stand
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    density = 3.6346*g/cm3; 
    sprintf(fSourceMaterialName,"SNOLAB Towers Large Brass Screws");
    fMat = new G4Material("Brass",density,4);
    fMat->AddElement(elCu, mass_fraction = 0.7 * perCent);
    fMat->AddElement(elFe, mass_fraction = 0.0005 * perCent);
    fMat->AddElement(elPb, mass_fraction = 0.0007 * perCent);
    fMat->AddElement(elZn, mass_fraction = 0.2988 * perCent);
    
    G4double Length = 19.05*cm; //perpendicular to can
    G4double Width = 16.51*cm; //radially from can
    G4double Height = 2.54*cm; //vertically  

    G4double LengthA = 25.4*cm; //perpendicular to can
    G4double WidthA = 19.05*cm; //radially from can
    G4double HeightA = 0.47625*cm; //vertically  

    // Placed centered on top of can:
    G4ThreeVector Center(0,0, zp+Height/2+HeightA);
    G4ThreeVector CenterA(0,0, zp+HeightA/2);

    //define source geometry however you want. 
    G4Box *VolSolid = new G4Box("Simulated Solid", Length/2, Width/2, Height/2);
   
    G4Box *VolSolidA = new G4Box("Acrylic Stand", LengthA/2, WidthA/2, HeightA/2);
        
    G4LogicalVolume *fLogAcrylicStand = new G4LogicalVolume(VolSolidA, fMatAcrylic, "LogAcryclicStand", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyAcrylicStand = new G4PVPlacement(noRotation, CenterA, fLogAcrylicStand, "Acrylic Stand", logdetector, false, 0); 

    
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 35*cm; //>2 * greatest distance from center of Ge crystal
  }

  if (fSourceMaterialID == 21){
    FoundID = true;
    //gopher Medium Brass Screws 1350.6 on top of large acrylic stand 191108
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    density = 2.7473*g/cm3; 
    sprintf(fSourceMaterialName,"SNOLAB Towers Medium Brass Screws");
    fMat = new G4Material("Brass",density,4);
    fMat->AddElement(elCu, mass_fraction = 0.7 * perCent);
    fMat->AddElement(elFe, mass_fraction = 0.0005 * perCent);
    fMat->AddElement(elPb, mass_fraction = 0.0007 * perCent);
    fMat->AddElement(elZn, mass_fraction = 0.2988 * perCent);
    
    G4double Length = 15.24*cm; //perpendicular to can
    G4double Width = 12.7*cm; //radially from can
    G4double Height = 2.54*cm; //vertically  

    G4double LengthA = 25.4*cm; //perpendicular to can
    G4double WidthA = 19.05*cm; //radially from can
    G4double HeightA = 0.47625*cm; //vertically  

    // Placed centered on top of can:
    G4ThreeVector Center(0,0, zp+Height/2+HeightA);
    G4ThreeVector CenterA(0,0, zp+HeightA/2);

    //define source geometry however you want. 
    G4Box *VolSolid = new G4Box("Simulated Solid", Length/2, Width/2, Height/2);
   
    G4Box *VolSolidA = new G4Box("Acrylic Stand", LengthA/2, WidthA/2, HeightA/2);
        
    G4LogicalVolume *fLogAcrylicStand = new G4LogicalVolume(VolSolidA, fMatAcrylic, "LogAcryclicStand", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyAcrylicStand = new G4PVPlacement(noRotation, CenterA, fLogAcrylicStand, "Acrylic Stand", logdetector, false, 0); 

    
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 35*cm; //>2 * greatest distance from center of Ge crystal
  }


  if (fSourceMaterialID == 22){
    FoundID = true;
    //gopher Medium Brass Screws Dowel 1308.1g on top of large acrylic stand 191119
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    density = 2.9565*g/cm3; 
    sprintf(fSourceMaterialName,"SNOLAB Towers Medium Brass Screws Dowel");
    fMat = new G4Material("Brass",density,4);
    fMat->AddElement(elCu, mass_fraction = 0.7 * perCent);
    fMat->AddElement(elFe, mass_fraction = 0.0005 * perCent);
    fMat->AddElement(elPb, mass_fraction = 0.0007 * perCent);
    fMat->AddElement(elZn, mass_fraction = 0.2988 * perCent);
    
    G4double Length = 15.24*cm; //perpendicular to can
    G4double Width = 15.24*cm; //radially from can
    G4double Height = 1.905*cm; //vertically  

    G4double LengthA = 25.4*cm; //perpendicular to can
    G4double WidthA = 19.05*cm; //radially from can
    G4double HeightA = 0.47625*cm; //vertically  

    // Placed centered on top of can:
    G4ThreeVector Center(0,0, zp+Height/2+HeightA);
    G4ThreeVector CenterA(0,0, zp+HeightA/2);

    //define source geometry however you want. 
    G4Box *VolSolid = new G4Box("Simulated Solid", Length/2, Width/2, Height/2);
   
    G4Box *VolSolidA = new G4Box("Acrylic Stand", LengthA/2, WidthA/2, HeightA/2);
        
    G4LogicalVolume *fLogAcrylicStand = new G4LogicalVolume(VolSolidA, fMatAcrylic, "LogAcryclicStand", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyAcrylicStand = new G4PVPlacement(noRotation, CenterA, fLogAcrylicStand, "Acrylic Stand", logdetector, false, 0); 

    
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 35*cm; //>2 * greatest distance from center of Ge crystal
  }


  if (fSourceMaterialID == 23){
    FoundID = true;
    //gopher Small Brass Screws 614.7g on top of large acrylic stand 191129
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    density = 2.2734*g/cm3; 
    sprintf(fSourceMaterialName,"SNOLAB Towers Small Brass Screws");
    fMat = new G4Material("Brass",density,4);
    fMat->AddElement(elCu, mass_fraction = 0.7 * perCent);
    fMat->AddElement(elFe, mass_fraction = 0.0005 * perCent);
    fMat->AddElement(elPb, mass_fraction = 0.0007 * perCent);
    fMat->AddElement(elZn, mass_fraction = 0.2988 * perCent);
    
    G4double Length = 15.24*cm; //perpendicular to can
    G4double Width = 13.97*cm; //radially from can
    G4double Height = 1.27*cm; //vertically  

    G4double LengthA = 25.4*cm; //perpendicular to can
    G4double WidthA = 19.05*cm; //radially from can
    G4double HeightA = 0.47625*cm; //vertically  

    // Placed centered on top of can:
    G4ThreeVector Center(0,0, zp+Height/2+HeightA);
    G4ThreeVector CenterA(0,0, zp+HeightA/2);

    //define source geometry however you want. 
    G4Box *VolSolid = new G4Box("Simulated Solid", Length/2, Width/2, Height/2);
   
    G4Box *VolSolidA = new G4Box("Acrylic Stand", LengthA/2, WidthA/2, HeightA/2);
        
    G4LogicalVolume *fLogAcrylicStand = new G4LogicalVolume(VolSolidA, fMatAcrylic, "LogAcryclicStand", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyAcrylicStand = new G4PVPlacement(noRotation, CenterA, fLogAcrylicStand, "Acrylic Stand", logdetector, false, 0); 

    
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 35*cm; //>2 * greatest distance from center of Ge crystal
  }


  if (fSourceMaterialID == 24){
    FoundID = true;
    //gopher lead-free EMI Shielding Tape 774.9g on top of large acrylic stand 191211
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    density = 3.9044*g/cm3; 
    sprintf(fSourceMaterialName,"Lead free Cu EMI Shielding Tape");
    fMat = new G4Material("Copper",density,1);
    fMat->AddElement(elCu, mass_fraction = 1.0 * perCent);
    
    G4double OD = 12.3825*cm; //Outer Diameter
    G4double ID = 8.41375*cm; //Inner Diameter
    G4double Height = 1.905*cm; //vertically  

    G4double LengthA = 25.4*cm; //perpendicular to can
    G4double WidthA = 19.05*cm; //radially from can
    G4double HeightA = 0.47625*cm; //vertically  

    // Placed centered on top of can:
    G4ThreeVector Center(0,0, zp+Height/2+HeightA);
    G4ThreeVector CenterA(0,0, zp+HeightA/2);

    //define source geometry however you want. 
    G4Tubs *cyl1 = new G4Tubs("CopperTapeOutside",0,OD/2, Height/2, 0*deg, 360*deg); 
    G4Tubs *cyl2 = new G4Tubs("CopperTapeInside",0,ID/2, Height/2, 0*deg, 360*deg); 
    G4SubtractionSolid *VolSolid = new G4SubtractionSolid("Hollow Copper Tape", cyl1, cyl2);
    G4Box *VolSolidA = new G4Box("Acrylic Stand", LengthA/2, WidthA/2, HeightA/2);
        
    G4LogicalVolume *fLogAcrylicStand = new G4LogicalVolume(VolSolidA, fMatAcrylic, "LogAcryclicStand", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyAcrylicStand = new G4PVPlacement(noRotation, CenterA, fLogAcrylicStand, "Acrylic Stand", logdetector, false, 0); 

    
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 35*cm; //>2 * greatest distance from center of Ge crystal
  }

  if (fSourceMaterialID == 25){
    FoundID = true;
    //SENSEI Aurubis Copper Block 2120.54g on top of large acrylic stand 191219
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    density = 10.35*g/cm3; 
    sprintf(fSourceMaterialName,"SENSEI Aurubis Copper Block");
    fMat = new G4Material("Brass",density,4);
    fMat->AddElement(elCu, mass_fraction = 0.7 * perCent);
    fMat->AddElement(elFe, mass_fraction = 0.0005 * perCent);
    fMat->AddElement(elPb, mass_fraction = 0.0007 * perCent);
    fMat->AddElement(elZn, mass_fraction = 0.2988 * perCent);
    
    G4double Length = 6.35*cm; //perpendicular to can
    G4double Width = 6.35*cm; //radially from can
    G4double Height = 5.08*cm; //vertically  

    G4double LengthA = 25.4*cm; //perpendicular to can
    G4double WidthA = 19.05*cm; //radially from can
    G4double HeightA = 0.47625*cm; //vertically  

    // Placed centered on top of can:
    G4ThreeVector Center(0,0, zp+Height/2+HeightA);
    G4ThreeVector CenterA(0,0, zp+HeightA/2);

    //define source geometry however you want. 
    G4Box *VolSolid = new G4Box("Simulated Solid", Length/2, Width/2, Height/2);
   
    G4Box *VolSolidA = new G4Box("Acrylic Stand", LengthA/2, WidthA/2, HeightA/2);
        
    G4LogicalVolume *fLogAcrylicStand = new G4LogicalVolume(VolSolidA, fMatAcrylic, "LogAcryclicStand", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyAcrylicStand = new G4PVPlacement(noRotation, CenterA, fLogAcrylicStand, "Acrylic Stand", logdetector, false, 0); 

    
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 35*cm; //>2 * greatest distance from center of Ge crystal
  }

  if (fSourceMaterialID == 26){
    FoundID = true;
    density = 1.05*g/cm3;  // mass is 2.1 g @ 13 -> 1.05, 16 -> 0.85, 10 -> 1.36
    sprintf(fSourceMaterialName,"19-004-U1, RGU-1");
    fMat =new G4Material("Silica Powder",density,2);
    fMat->AddElement(elSi, n_atoms = 1);
    fMat->AddElement(elO, n_atoms = 2);

    G4double density2 = 0.855*g/cm3;
    G4Material *fMatBottle = new G4Material("Polypropylene Container",density2,2);
    fMatBottle->AddElement(elC, n_atoms = 3);
    fMatBottle->AddElement(elH, n_atoms = 6);

    //Define Geometry

    G4double BottleThickness = 1.5*mm;
    G4double BottleOuterRadius = 8.5*mm;
    G4double BottleOuterHeight = 62*mm;
    G4double SampleHeight = 13*mm;

    //define source geometry however you want. 
    G4Tubs *VolOuterBottle = new G4Tubs("Outer Bottle Volume",0,BottleOuterRadius,BottleOuterHeight/2,0*deg,360*deg);
    G4Tubs *VolEmptyBottle = new G4Tubs("Empty Volume in Bottle",0,BottleOuterRadius-BottleThickness,BottleOuterHeight/2-BottleThickness,0*deg,360*deg);
    G4VSolid *VolBottle = new G4SubtractionSolid("BottleVolume", VolOuterBottle,VolEmptyBottle,noRotation,G4ThreeVector(0,0,0));
    
    G4Tubs *VolSample = new G4Tubs("Sample",0, BottleOuterRadius-BottleThickness, SampleHeight/2, 0*deg, 360*deg);

    G4ThreeVector BottleCenter(0, 0, zp + BottleOuterHeight/2);
    G4ThreeVector SampleCenter(0, 0, zp + BottleThickness +SampleHeight/2);
    // (0,0,zp) is the top-center of each can. 
    //DAWN views from the x-direction, so place non-symmetric solids in the y-z plane. 
    
    G4LogicalVolume *fLogBottle = new G4LogicalVolume(VolBottle, fMatBottle, "LogBottle", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyBottle = new G4PVPlacement(noRotation, BottleCenter, fLogBottle, "Bottle", logdetector, false, 0);
    
    fLogContents = new G4LogicalVolume(VolSample, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, SampleCenter, fLogContents, "Source Solid", logdetector, false, 0);
    //dBoundingBoxLength = 35*cm; //>2 * greatest distance from center of Ge crystal

    dBoundingBoxLength = -1;  //active area is 1mm in radius, 1.2mm in height

    dBBxlo = -BottleOuterRadius + 1*mm ;
    dBBxhi = BottleOuterRadius - 1*mm;
    dBBylo = -BottleOuterRadius + 1*mm ;
    dBByhi = BottleOuterRadius - 1*mm ;
    dBBzlo = 0 ;
    dBBzhi = BottleOuterHeight + 1*mm;
 }

  if (fSourceMaterialID == 27){
    FoundID = true;
    density =  1.00*g/cm3;  // mass is 3.2 g -> @ 21 -> 0.99, @ 18 -> 1.15, 24 -> 0.87
    sprintf(fSourceMaterialName,"19-004-T1, RGTh-1");
    fMat =new G4Material("Silica Powder",density,2);
    fMat->AddElement(elSi, n_atoms = 1);
    fMat->AddElement(elO, n_atoms = 2);

    G4double density2 = 0.855*g/cm3;
    G4Material *fMatBottle = new G4Material("Polypropylene Container",density2,2);
    fMatBottle->AddElement(elC, n_atoms = 3);
    fMatBottle->AddElement(elH, n_atoms = 6);

    //Define Geometry

    G4double BottleThickness = 1.5*mm;
    G4double BottleOuterRadius = 8.5*mm;
    G4double BottleOuterHeight = 62*mm;
    G4double SampleHeight = 21*mm;

    //define source geometry however you want. 
    G4Tubs *VolOuterBottle = new G4Tubs("Outer Bottle Volume",0,BottleOuterRadius,BottleOuterHeight/2,0*deg,360*deg);
    G4Tubs *VolEmptyBottle = new G4Tubs("Empty Volume in Bottle",0,BottleOuterRadius-BottleThickness,BottleOuterHeight/2-BottleThickness,0*deg,360*deg);
    G4VSolid *VolBottle = new G4SubtractionSolid("BottleVolume", VolOuterBottle,VolEmptyBottle,noRotation,G4ThreeVector(0,0,0));

    G4Tubs *VolSample = new G4Tubs("Sample",0, BottleOuterRadius-BottleThickness, SampleHeight/2, 0*deg, 360*deg);

    G4ThreeVector BottleCenter(0, 0, zp + BottleOuterHeight/2);
    G4ThreeVector SampleCenter(0, 0, zp + BottleThickness +SampleHeight/2);
    // (0,0,zp) is the top-center of each can. 
    //DAWN views from the x-direction, so place non-symmetric solids in the y-z plane. 
        
    G4LogicalVolume *fLogBottle = new G4LogicalVolume(VolBottle, fMatBottle, "LogBottle", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyBottle = new G4PVPlacement(noRotation, BottleCenter, fLogBottle, "Bottle", logdetector, false, 0);
    
    fLogContents = new G4LogicalVolume(VolSample, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, SampleCenter, fLogContents, "Source Solid", logdetector, false, 0);
    //dBoundingBoxLength = 10*cm; //>2 * greatest distance from center of Ge crystal
   
    dBoundingBoxLength = -1;  //active area is 1mm in radius, 1.2mm in height

    dBBxlo = -BottleOuterRadius + 1*mm ;
    dBBxhi = BottleOuterRadius - 1*mm;
    dBBylo = -BottleOuterRadius + 1*mm ;
    dBByhi = BottleOuterRadius - 1*mm ;
    dBBzlo = 0 ;
    dBBzhi = BottleOuterHeight + 1*mm;
 }
    
  if (fSourceMaterialID == 28){
    FoundID = true;
    density = 1.35*g/cm3; // mass is 0.832 @ 4 -> 1.35, 3 -> 1.80, 5 -> 1.08
    sprintf(fSourceMaterialName,"19-004-K2");
    fMat =new G4Material("K2SO4",density,3);
    fMat->AddElement(elK, n_atoms = 2);
    fMat->AddElement(elS, n_atoms = 1);
    fMat->AddElement(elO, n_atoms = 4);

    G4double density2 = 0.855*g/cm3;
    G4Material *fMatBottle = new G4Material("Polypropylene Container",density2,2);
    fMatBottle->AddElement(elC, n_atoms = 3);
    fMatBottle->AddElement(elH, n_atoms = 6);

    //Define Geometry
        
    G4double BottleThickness = 1.5*mm;
    G4double BottleOuterRadius = 8.5*mm;
    G4double BottleOuterHeight = 62*mm;
    G4double SampleHeight = 4*mm;
                            
    //define source geometry however you want. 
    G4Tubs *VolOuterBottle = new G4Tubs("Outer Bottle Volume",0,BottleOuterRadius,BottleOuterHeight/2,0*deg,360*deg);
    G4Tubs *VolEmptyBottle = new G4Tubs("Empty Volume in Bottle",0,BottleOuterRadius-BottleThickness,BottleOuterHeight/2-BottleThickness,0*deg,360*deg);
    G4VSolid *VolBottle = new G4SubtractionSolid("BottleVolume", VolOuterBottle,VolEmptyBottle,noRotation,G4ThreeVector(0,0,0));
                                                
    G4Tubs *VolSample = new G4Tubs("Sample",0, BottleOuterRadius-BottleThickness, SampleHeight/2, 0*deg, 360*deg);
                                                  
    G4ThreeVector BottleCenter(0, 0, zp + BottleOuterHeight/2);
    G4ThreeVector SampleCenter(0, 0, zp + BottleThickness +SampleHeight/2);
    // (0,0,zp) is the top-center of each can. 
    //DAWN views from the x-direction, so place non-symmetric solids in the y-z plane. 
                                                                                                                                     
    G4LogicalVolume *fLogBottle = new G4LogicalVolume(VolBottle, fMatBottle, "LogBottle", 0,0,0); 
    __attribute__((unused)) G4VPhysicalVolume *fPhyBottle = new G4PVPlacement(noRotation, BottleCenter, fLogBottle, "Bottle", logdetector, false, 0);
   
    fLogContents = new G4LogicalVolume(VolSample, fMat, "LogSolid", 0,0,0);                                                                                         
    fPhyContents = new G4PVPlacement(noRotation, SampleCenter, fLogContents, "Source Solid", logdetector, false, 0); 

    dBoundingBoxLength = -1;  //active area is 1mm in radius, 1.2mm in height

    dBBxlo = -BottleOuterRadius + 1*mm ;
    dBBxhi = BottleOuterRadius - 1*mm;
    dBBylo = -BottleOuterRadius + 1*mm ;
    dBByhi = BottleOuterRadius - 1*mm ;
    dBBzlo = 0 ;
    dBBzhi = BottleOuterHeight + 1*mm;
  }

  if (fSourceMaterialID == 29){
    FoundID = true;
    density = 1.05*g/cm3;  // mass is 2.1 g @ 13 -> 1.05, 16 -> 0.85, 10 -> 1.36
    sprintf(fSourceMaterialName,"19-004-U2");
    fMat =new G4Material("Silica Powder",density,2);
    fMat->AddElement(elSi, n_atoms = 1);
    fMat->AddElement(elO, n_atoms = 2);

    G4double density2 = 0.855*g/cm3;
    G4Material *fMatBottle = new G4Material("Polypropylene Container",density2,2);
    fMatBottle->AddElement(elC, n_atoms = 3);
    fMatBottle->AddElement(elH, n_atoms = 6);

    //Define Geometry
    
    G4double BottleThickness = 1.5*mm;
    G4double BottleOuterRadius = 8.5*mm;
    G4double BottleOuterHeight = 62*mm;
    G4double SampleHeight = 13*mm;
    
    //define source geometry however you want. 
    G4Tubs *VolOuterBottle = new G4Tubs("Outer Bottle Volume",0,BottleOuterRadius,BottleOuterHeight/2,0*deg,360*deg);
    G4Tubs *VolEmptyBottle = new G4Tubs("Empty Volume in Bottle",0,BottleOuterRadius-BottleThickness,BottleOuterHeight/2-BottleThickness,0*deg,360*deg);
    G4VSolid *VolBottle = new G4SubtractionSolid("BottleVolume", VolOuterBottle,VolEmptyBottle,noRotation,G4ThreeVector(0,0,0));
    
    G4Tubs *VolSample = new G4Tubs("Sample",0, BottleOuterRadius-BottleThickness, SampleHeight/2, 0*deg, 360*deg);
    
    G4ThreeVector BottleCenter(0, 0, zp + BottleOuterHeight/2);
    G4ThreeVector SampleCenter(0, 0, zp + BottleThickness +SampleHeight/2);
    // (0,0,zp) is the top-center of each can. 
    //DAWN views from the x-direction, so place non-symmetric solids in the y-z plane. 
    
    G4LogicalVolume *fLogBottle = new G4LogicalVolume(VolBottle, fMatBottle, "LogBottle", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyBottle = new G4PVPlacement(noRotation, BottleCenter, fLogBottle, "Bottle", logdetector, false, 0);
    
    fLogContents = new G4LogicalVolume(VolSample, fMat, "LogSolid", 0,0,0);                    
    fPhyContents = new G4PVPlacement(noRotation, SampleCenter, fLogContents, "Source Solid", logdetector, false, 0);

    dBoundingBoxLength = -1;  //active area is 1mm in radius, 1.2mm in height

    dBBxlo = -BottleOuterRadius + 1*mm ;
    dBBxhi = BottleOuterRadius - 1*mm;
    dBBylo = -BottleOuterRadius + 1*mm ;
    dBByhi = BottleOuterRadius - 1*mm ;
    dBBzlo = 0 ;
    dBBzhi = BottleOuterHeight + 1*mm;
  }

  if (fSourceMaterialID == 30){
    FoundID = true;
    density = 1.00*g/cm3;  // mass is 3.2 g -> @ 21 -> 0.99, @ 18 -> 1.15, 24 -> 0.87
    sprintf(fSourceMaterialName,"19-004-T2");
    fMat =new G4Material("Silica Powder",density,2);
    fMat->AddElement(elSi, n_atoms = 1);
    fMat->AddElement(elO, n_atoms = 2);

    G4double density2 = 0.855*g/cm3;
    G4Material *fMatBottle = new G4Material("Polypropylene Container",density2,2);
    fMatBottle->AddElement(elC, n_atoms = 3);
    fMatBottle->AddElement(elH, n_atoms = 6);

    //Define Geometry
    
    G4double BottleThickness = 1.5*mm;
    G4double BottleOuterRadius = 8.5*mm;
    G4double BottleOuterHeight = 62*mm;
    G4double SampleHeight = 21*mm;
    
    //define source geometry however you want. 
    G4Tubs *VolOuterBottle = new G4Tubs("Outer Bottle Volume",0,BottleOuterRadius,BottleOuterHeight/2,0*deg,360*deg);
    G4Tubs *VolEmptyBottle = new G4Tubs("Empty Volume in Bottle",0,BottleOuterRadius-BottleThickness,BottleOuterHeight/2-BottleThickness,0*deg,360*deg);
    G4VSolid *VolBottle = new G4SubtractionSolid("BottleVolume", VolOuterBottle,VolEmptyBottle,noRotation,G4ThreeVector(0,0,0));
    
    G4Tubs *VolSample = new G4Tubs("Sample",0, BottleOuterRadius-BottleThickness, SampleHeight/2, 0*deg, 360*deg);
    
    G4ThreeVector BottleCenter(0, 0, zp + BottleOuterHeight/2);
    G4ThreeVector SampleCenter(0, 0, zp + BottleThickness +SampleHeight/2);
    // (0,0,zp) is the top-center of each can. 
    //DAWN views from the x-direction, so place non-symmetric solids in the y-z plane. 
    
    G4LogicalVolume *fLogBottle = new G4LogicalVolume(VolBottle, fMatBottle, "LogBottle", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyBottle = new G4PVPlacement(noRotation, BottleCenter, fLogBottle, "Bottle", logdetector, false, 0);
    
    fLogContents = new G4LogicalVolume(VolSample, fMat, "LogSolid", 0,0,0);                    
    fPhyContents = new G4PVPlacement(noRotation, SampleCenter, fLogContents, "Source Solid", logdetector, false, 0);
    
    dBoundingBoxLength = -1;  //active area is 1mm in radius, 1.2mm in height

    dBBxlo = -BottleOuterRadius + 1*mm ;
    dBBxhi = BottleOuterRadius - 1*mm;
    dBBylo = -BottleOuterRadius + 1*mm ;
    dBByhi = BottleOuterRadius - 1*mm ;
    dBBzlo = 0 ;
    dBBzhi = BottleOuterHeight + 1*mm; 
  }
 
  if (fSourceMaterialID == 31){
    FoundID = true;
    density = 1.02*g/cm3; // mass is 0.626 @ 4 -> 1.02, 3 -> 1.36, 5 -> 0.81
    sprintf(fSourceMaterialName,"19-004-K1");
    fMat =new G4Material("K2SO4",density,3);
    fMat->AddElement(elK, n_atoms = 2);
    fMat->AddElement(elS, n_atoms = 1);
    fMat->AddElement(elO, n_atoms = 4);

    G4double density2 = 0.855*g/cm3;
    G4Material *fMatBottle = new G4Material("Polypropylene Container",density2,2);
    fMatBottle->AddElement(elC, n_atoms = 3);
    fMatBottle->AddElement(elH, n_atoms = 6);

    //Define Geometry
        
    G4double BottleThickness = 1.5*mm;
    G4double BottleOuterRadius = 8.5*mm;
    G4double BottleOuterHeight = 62*mm;
    G4double SampleHeight = 4*mm;
                            
    //define source geometry however you want. 
    G4Tubs *VolOuterBottle = new G4Tubs("Outer Bottle Volume",0,BottleOuterRadius,BottleOuterHeight/2,0*deg,360*deg);
    G4Tubs *VolEmptyBottle = new G4Tubs("Empty Volume in Bottle",0,BottleOuterRadius-BottleThickness,BottleOuterHeight/2-BottleThickness,0*deg,360*deg);
    G4VSolid *VolBottle = new G4SubtractionSolid("BottleVolume", VolOuterBottle,VolEmptyBottle,noRotation,G4ThreeVector(0,0,0));
                                                
    G4Tubs *VolSample = new G4Tubs("Sample",0, BottleOuterRadius-BottleThickness, SampleHeight/2, 0*deg, 360*deg);
                                                                                                           
    G4ThreeVector BottleCenter(0, 0, zp + BottleOuterHeight/2);
    G4ThreeVector SampleCenter(0, 0, zp + BottleThickness +SampleHeight/2);
    // (0,0,zp) is the top-center of each can. 
    //DAWN views from the x-direction, so place non-symmetric solids in the y-z plane. 
                                                                                                                                               
    G4LogicalVolume *fLogBottle = new G4LogicalVolume(VolBottle, fMatBottle, "LogBottle", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyBottle = new G4PVPlacement(noRotation, BottleCenter, fLogBottle, "Bottle", logdetector, false, 0);
    fLogContents = new G4LogicalVolume(VolSample, fMat, "LogSolid", 0,0,0);                                                                                     
    fPhyContents = new G4PVPlacement(noRotation, SampleCenter, fLogContents, "Source Solid", logdetector, false, 0);

    dBoundingBoxLength = -1;  //active area is 1mm in radius, 1.2mm in height

    dBBxlo = -BottleOuterRadius + 1*mm ;
    dBBxhi = BottleOuterRadius - 1*mm;
    dBBylo = -BottleOuterRadius + 1*mm ;
    dBByhi = BottleOuterRadius - 1*mm ;
    dBBzlo = 0 ;
    dBBzhi = BottleOuterHeight + 1*mm;
  }    

  if (fSourceMaterialID == 32){
    FoundID = true;
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    density = 0.396*g/cm3;
    sprintf(fSourceMaterialName,"Pilmac compression fitting, 3/4");
    fMat =new G4Material("Pilmac compression fitting, 3/4",density,2);
    fMat->AddElement(elC, n_atoms = 3);
    fMat->AddElement(elH, n_atoms = 6);

    G4int n=0;
    G4double ri[2], ro[2], zz[2];
   
    zz[n] = 0;
    ri[n] = 2.25*cm;
    ro[n] = 5.5*cm;
    n++;
    zz[n] = 15*cm;
    ri[n] = 2.25*cm;
    ro[n] = 5.5*cm;
    n++;

    //Dimension for the Acrylic stand
    G4double LengthA = 25.4*cm;
    G4double WidthA = 19.05*cm;
    G4double HeightA = 0.47625*cm;

    G4RotationMatrix *xRot = new G4RotationMatrix(0.0*deg,90.0*deg,0.0*deg);
    G4Polycone *VolSolid = new G4Polycone("Source Geometry", 0, 360*deg, n, zz, ri, ro);
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(xRot, G4ThreeVector(0,zp+30.0,zp+56.0+HeightA) , fLogContents, "Source Solid", logdetector, false, 0);

    // Placed centered on top of can:
    G4ThreeVector CenterA(0,0, zp+HeightA/2);

    //Define source geometry however you want.
    G4Box *VolSolidA = new G4Box("Acrylic Stand", LengthA/2, WidthA/2, HeightA/2);

    G4LogicalVolume *fLogAcrylicStand = new G4LogicalVolume(VolSolidA, fMatAcrylic, "LogAcryclicStand", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyAcrylicStand = new G4PVPlacement(noRotation, CenterA, fLogAcrylicStand, "Acrylic Stand", logdetector, false, 0);

  }

    if (fSourceMaterialID == 33){
    FoundID = true;
    density = 1.78*g/cm3; //considered mass and volume for 4 lenses together
    sprintf(fSourceMaterialName,"4 Lenses");
    fMat =new G4Material("4 lenses",density,2);
    fMat->AddElement(elSi, n_atoms = 1);
    fMat->AddElement(elO, n_atoms = 2);

    G4double OuterRadius = 0.92*cm;
    G4double OuterHeight = 2.23*cm;

    //G4Tubs *VolFullContainer = new G4Tubs("Lens Container Volume",0,OuterRadius,OuterHeight/2,0*deg,360*deg);
   
    G4Tubs *VolLens1 = new G4Tubs("Lens 1",0,OuterRadius,OuterHeight/2,0*deg,360*deg);
    G4Tubs *VolLens2 = new G4Tubs("Lens 2",0,OuterRadius,OuterHeight/2,0*deg,360*deg);
    G4Tubs *VolLens3 = new G4Tubs("Lens 3",0,OuterRadius,OuterHeight/2,0*deg,360*deg);
    G4Tubs *VolLens4 = new G4Tubs("Lens 4",0,OuterRadius,OuterHeight/2,0*deg,360*deg);

    G4ThreeVector Center(0, 0, zp+OuterHeight/2);
    G4ThreeVector TopRight(OuterRadius, OuterRadius, zp+OuterHeight/2);
    G4ThreeVector TopLeft(-OuterRadius, OuterRadius, zp+OuterHeight/2);
    G4ThreeVector BottomRight(OuterRadius, -OuterRadius, zp+OuterHeight/2);
    G4ThreeVector BottomLeft(-OuterRadius, -OuterRadius, zp+OuterHeight/2);

    G4VSolid *Add2 =  new G4UnionSolid("Add2", VolLens1, VolLens2, noRotation, TopLeft-TopRight);
    G4VSolid *Add3 = new G4UnionSolid("Add3", Add2, VolLens3, noRotation, BottomRight-TopRight);
    G4VSolid *VolSolid = new G4UnionSolid("4 Lenses", Add3, VolLens4, noRotation, BottomLeft-TopRight);

    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, TopRight, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 20*cm; //>2 * greatest distance from center of Ge crystal
 }

    if (fSourceMaterialID == 34){
    FoundID = true;
    density = 1.660*g/cm3; //considered mass and volume for 2 lenses together
    sprintf(fSourceMaterialName,"2 Lenses");
    fMat =new G4Material("2 lenses",density,2);
    fMat->AddElement(elSi, n_atoms = 1);
    fMat->AddElement(elO, n_atoms = 2);

    G4double OuterRadius = 0.7*cm;
    G4double OuterHeight = 1.586*cm;

    G4Tubs *VolLens1 = new G4Tubs("Lens 1",0,OuterRadius,OuterHeight/2,0*deg,360*deg);
    G4Tubs *VolLens2 = new G4Tubs("Lens 2",0,OuterRadius,OuterHeight/2,0*deg,360*deg);

    G4ThreeVector Center(0, 0, zp+OuterHeight/2);
    G4ThreeVector Right(OuterRadius, 0, zp+OuterHeight/2);
    G4ThreeVector Left(-OuterRadius, 0, zp+OuterHeight/2);

    G4VSolid *Add2 =  new G4UnionSolid("Add2", VolLens1, VolLens2, noRotation, Left-Right);

    fLogContents = new G4LogicalVolume(Add2, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Right, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 10*cm; //>2 * greatest distance from center of Ge crystal
  }

  if (fSourceMaterialID == 35){
    //Hexagon shape for CUTE copper holder
    FoundID = true;
    density = 7.82*g/cm3;   //using effective density: mass/volume of hexagon
                            //eff density is 133.33g/17.05 cm3
    sprintf(fSourceMaterialName,"CUTE Copper Holder");
    fMat =new G4Material("CUTE Copper Holder",density,1);
    fMat->AddElement(elCu, n_atoms = 1);

    G4double height = 3*mm;  //using the non-lip thickness
    G4double rside = 40.5*mm;//radius to closest side (inradius)

    G4double ri[2] = {0,0};
    G4double ro[2] = {rside,rside};
    G4double zz[2] = {0,height};

    G4Polyhedra *Hexagon = new G4Polyhedra("Copper Holder", 0, 2*CLHEP::pi, 6, 2, zz, ri, ro);
    G4ThreeVector Center(0, 0, zp);

    fLogContents = new G4LogicalVolume(Hexagon, fMat, "LogSolid", 0,0,0);

    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 10*cm; //>2 * greatest distance from center of Ge crystal
  }

  if (fSourceMaterialID == 36){
    FoundID = true;
    density = 9.39*g/cm3; 
    sprintf(fSourceMaterialName,"Stainless Steel Feedthrough Tube");
    fMat = new G4Material("Stainless Steel",density,4);
   fMat->AddElement(elCr, mass_fraction = 17.5 * perCent); 
    fMat->AddElement(elFe, mass_fraction = 68.0 * perCent); 
    fMat->AddElement(elNi, mass_fraction = 12.0 * perCent); 
    fMat->AddElement(elMo, mass_fraction = 2.5 * perCent);
    G4double InnerRadius = 32/2*mm;
    G4double OuterRadius = 37/2*mm; //radially from can
    G4double Height = 100*mm; //vertically    
    G4ThreeVector Center(0,0, zp+(OuterRadius));
    G4RotationMatrix *noRotation1 = new G4RotationMatrix(0.0*deg,90.0*deg,0.0*deg);
    G4Tubs *VolSolid = new G4Tubs("Simulated Solid", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation1, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 15*cm; //A good distance away from the source
  }

    if (fSourceMaterialID == 37){
    FoundID = true;
    density = 1.379*g/cm3; //Density of Lens
    G4Material* fMat_lens = new G4Material("lens", density,2);
    fMat_lens->AddElement(elSi, n_atoms = 1);
    fMat_lens->AddElement(elO, n_atoms = 2);
    G4Material* fMat_lens_SS= new G4Material("Lens2",density,4);
    fMat_lens_SS->AddElement(elNi, mass_fraction = 12.0*perCent);
    fMat_lens_SS->AddElement(elMo, mass_fraction = 2.5*perCent);
    fMat_lens_SS->AddElement(elCr, mass_fraction = 17.5*perCent);
    fMat_lens_SS->AddElement(elFe, mass_fraction = 68*perCent);
    G4Material* fMat_total_lens = new G4Material("PICO_Lens", density, 2);
    fMat_total_lens->AddMaterial(fMat_lens, mass_fraction = 90*perCent);
    fMat_total_lens->AddMaterial(fMat_lens_SS, mass_fraction = 10*perCent);

    G4double density2 = 8.05*g/cm3; //density of empty cylinder
    G4Material *fMat_empty = new G4Material("Empty_cyl",density2,4);
    fMat_empty->AddElement(elNi, mass_fraction = 12.0*perCent);
    fMat_empty->AddElement(elMo, mass_fraction = 2.5*perCent);
    fMat_empty->AddElement(elCr, mass_fraction = 17.5*perCent);
    fMat_empty->AddElement(elFe, mass_fraction = 68*perCent);

    G4double density3 = 2.778*g/cm3; //Density of Camera
    G4Material *fMat_camera = new G4Material("Camera",density3,4);
    fMat_camera->AddElement(elNi, mass_fraction = 12.0*perCent);
    fMat_camera->AddElement(elMo, mass_fraction = 2.5*perCent);
    fMat_camera->AddElement(elCr, mass_fraction = 17.5*perCent);
    fMat_camera->AddElement(elFe, mass_fraction = 68*perCent);
    G4Material *fMat_camera_plastic = new G4Material("Camera2", density3, 2);
    fMat_camera_plastic->AddElement(elC, n_atoms = 2);
    fMat_camera_plastic->AddElement(elH, n_atoms = 4);
    G4Material* fMat_total_camera = new G4Material("PICO_Camera", density3, 2);
    fMat_total_camera->AddMaterial(fMat_camera, mass_fraction = 50*perCent);
    fMat_total_camera->AddMaterial(fMat_camera_plastic, mass_fraction = 50*perCent);

    G4double density4 = 1.751*g/cm3;

    G4Material* fMat_whole = new G4Material("whole system", density4, 3);
    fMat_whole->AddMaterial(fMat_total_camera, mass_fraction = 36.71*perCent);
    fMat_whole->AddMaterial(fMat_total_lens, mass_fraction = 59.93*perCent);
    fMat_whole->AddMaterial(fMat_empty, mass_fraction = 3.36*perCent);

    G4double LensRadius = 22*mm;
    G4double LensHeight = 56.5*mm;
    G4double EmptyOuterRadius = 11*mm;
    G4double EmptyInnerRadius = 10*mm;
    G4double EmptyHeight = 12.5*mm;
    G4double Length = 29*mm;
    G4double Width = 30*mm;
    G4double Height = 30*mm;

    G4Tubs *VolLens = new G4Tubs("Lens",0,LensRadius,LensHeight/2,0*deg,360*deg);
    G4RotationMatrix *Rot1= new G4RotationMatrix();
    Rot1->rotateY(90*deg);
    G4LogicalVolume *fLogLens = new G4LogicalVolume(VolLens, fMat_total_lens, "LogLens",0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyLens = new G4PVPlacement( noRotation,G4ThreeVector(0,0,0), fLogLens, "Lens", logdetector, false, 0);
    G4ThreeVector Top(0,0,zp+22*mm+22*mm+4*mm);
    G4Tubs *VolEmpty = new G4Tubs("Empty",EmptyInnerRadius,EmptyOuterRadius,EmptyHeight/2,0*deg,360*deg);
    G4ThreeVector Middle(0, 0, zp+EmptyHeight/2+EmptyHeight/2+EmptyHeight/2);
    G4RotationMatrix *Rot2= new G4RotationMatrix();
    Rot2->rotateY(90*deg);
    G4LogicalVolume *fLogEmpty = new G4LogicalVolume(VolEmpty, fMat_empty, "LogEmpty",0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyEmpty = new G4PVPlacement( noRotation,G4ThreeVector(0,0,0), fLogEmpty, "Empty", logdetector, false, 0);
    G4Box *VolCamera = new G4Box("Camera", Length/2, Width/2, Height/2);
    G4LogicalVolume *fLogCamera = new G4LogicalVolume(VolCamera, fMat_total_camera, "LogEmpty",0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyCamera = new G4PVPlacement( noRotation,G4ThreeVector(0,0,0), fLogCamera, "Camera", logdetector, false, 0);
    G4ThreeVector Bottom(0, 0, zp-3*mm);

    G4VSolid *Add = new G4UnionSolid("Add", VolEmpty, VolCamera, Rot2, Bottom - Middle);
    G4VSolid *Cyl = new G4UnionSolid("Two Cyls", Add, VolLens, noRotation, Top - Middle);

    fLogContents = new G4LogicalVolume(Cyl, fMat_whole, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(Rot1, Middle, fLogContents, "Source Solid", logdetector, false, 0);

    dBoundingBoxLength = 20*cm; //>2 * greatest distance from center of Ge crystal
  }

  if (fSourceMaterialID == 38){
    FoundID = true;
    density = 0.667*g/cm3;
    sprintf(fSourceMaterialName,"EPDM Gaskets From McMasterCarr");
    fMat = new G4Material("EPDM",density,2);
    fMat->AddElement(elC, n_atoms = 6);
    fMat->AddElement(elH, n_atoms = 13);

    G4double InnerRadius = 2.2/2*cm;
    G4double OuterRadius = 5.0/2*cm; 
    G4double Height = 2.3*cm; 

    G4Tubs *VolCyl1 = new G4Tubs("Cyliner1", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    G4Tubs *VolCyl2 = new G4Tubs("Cylinder2",InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    G4Tubs *VolCyl3 = new G4Tubs("Cyliner1", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);

    G4ThreeVector Right(OuterRadius-5*mm-2*mm, OuterRadius, zp+Height/2);
    G4ThreeVector Left(-OuterRadius-3*mm, 0, zp+Height/2);
    G4ThreeVector Third(OuterRadius-5*mm-2*mm, -OuterRadius, zp+Height/2);

    G4VSolid *Add = new G4UnionSolid("Add", VolCyl1, VolCyl2, noRotation, Left-Right);
    G4VSolid *Add1 = new G4UnionSolid("Add1", Add, VolCyl3, noRotation, Third-Right);

    fLogContents = new G4LogicalVolume(Add1, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Right, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 10*cm;
  }

  if (fSourceMaterialID == 39){
    FoundID = true;
    density = 0.8467*g/cm3;
    sprintf(fSourceMaterialName,"Viton Gaskets From McMasterCarr");
    fMat = new G4Material("Viton",density,3);
    fMat->AddElement(elC, n_atoms = 5);
    fMat->AddElement(elH, n_atoms = 2);
    fMat->AddElement(elF, n_atoms = 8);

    G4double InnerRadius = 2.2/2*cm;
    G4double OuterRadius = 5.0/2*cm;
    G4double Height = 1.5*cm;

    G4Tubs *VolCyl1 = new G4Tubs("Cyliner1", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    G4Tubs *VolCyl2 = new G4Tubs("Cylinder2",InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    G4Tubs *VolCyl3 = new G4Tubs("Cyliner1", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);

    G4ThreeVector Right(OuterRadius-5*mm-2*mm, OuterRadius, zp+Height/2);
    G4ThreeVector Left(-OuterRadius-3*mm, 0, zp+Height/2);
    G4ThreeVector Third(OuterRadius-5*mm-2*mm, -OuterRadius, zp+Height/2);

    G4VSolid *Add = new G4UnionSolid("Add", VolCyl1, VolCyl2, noRotation, Left-Right);
    G4VSolid *Add1 = new G4UnionSolid("Add1", Add, VolCyl3, noRotation, Third-Right);

    fLogContents = new G4LogicalVolume(Add1, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Right, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 10*cm;
  }

  if (fSourceMaterialID == 40){
    FoundID = true;
    density = 2.13*g/cm3; //mass 32.1g vol 15.08cm^3
    sprintf(fSourceMaterialName,"6 Polished Synthetic Quartz Disks");
    fMat = new G4Material("Synthetic Quartz",density,2); //SiO4
    fMat->AddElement(elSi, n_atoms = 1);
    fMat->AddElement(elO, n_atoms = 4);

    G4double InnerRadius = 0;
    G4double OuterRadius = 10*mm;
    G4double Height = 8*mm;

    G4Tubs *VolCyl1 = new G4Tubs("disc1", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    G4Tubs *VolCyl2 = new G4Tubs("disc2",InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    G4Tubs *VolCyl3 = new G4Tubs("disc3", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    G4Tubs *VolCyl4 = new G4Tubs("disc4", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    G4Tubs *VolCyl5 = new G4Tubs("disc5",InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    G4Tubs *VolCyl6 = new G4Tubs("disc6", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);

    G4ThreeVector TopRight(2*OuterRadius, 2*OuterRadius, zp+Height/2);
    G4ThreeVector TopCenter(0, 2*OuterRadius, zp+Height/2);
    G4ThreeVector TopLeft(-2*OuterRadius, 2*OuterRadius, zp+Height/2);
    G4ThreeVector BottomRight(2*OuterRadius, -2*OuterRadius, zp+Height/2);
    G4ThreeVector BottomCenter(0, -2*OuterRadius, zp+Height/2);
    G4ThreeVector BottomLeft(-2*OuterRadius, -2*OuterRadius, zp+Height/2);
    G4ThreeVector Center(0, -OuterRadius, zp+Height/2);

    G4VSolid *Add = new G4UnionSolid("Add", VolCyl1, VolCyl2, noRotation, TopCenter-TopRight);
    G4VSolid *Add1 = new G4UnionSolid("Add1", Add, VolCyl3, noRotation, TopCenter - TopLeft);
    G4VSolid *BAdd = new G4UnionSolid("BAdd", VolCyl4, VolCyl5, noRotation, BottomCenter-BottomRight);
    G4VSolid *BAdd1 = new G4UnionSolid("BAdd1", BAdd, VolCyl6, noRotation, BottomCenter - BottomLeft);

    G4VSolid *Add2 = new G4UnionSolid("Total", Add1, BAdd1, noRotation, TopCenter/2-BottomCenter/2);

    fLogContents = new G4LogicalVolume(Add2, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center , fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 10*cm;
 }
  
    if (fSourceMaterialID == 41){
    FoundID = true;
    density = 2.11*g/cm3; //mass 17.9g vol 8.48cm^3
    sprintf(fSourceMaterialName,"3 Unpolished Synthetic Quartz Disks");
    fMat = new G4Material("Synthetic Quartz",density,2); //SiO4
    fMat->AddElement(elSi, n_atoms = 1);
    fMat->AddElement(elO, n_atoms = 4);

    G4double InnerRadius = 0;
    G4double OuterRadius = 10*mm;
    G4double Height = 9*mm;

    G4Tubs *VolCyl1 = new G4Tubs("disc1", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    G4Tubs *VolCyl2 = new G4Tubs("disc2",InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    G4Tubs *VolCyl3 = new G4Tubs("disc3", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);

    G4ThreeVector Right(2*OuterRadius, 2*OuterRadius, zp+Height/2);
    G4ThreeVector TopCenter(0, 2*OuterRadius, zp+Height/2);
    G4ThreeVector Left(-2*OuterRadius, 2*OuterRadius, zp+Height/2);

    G4ThreeVector Center(0, 0, zp+Height/2);

    G4VSolid *Add = new G4UnionSolid("Add", VolCyl1, VolCyl2, noRotation, TopCenter-Right);
    G4VSolid *Add1 = new G4UnionSolid("Add1", Add, VolCyl3, noRotation, TopCenter - Left);

    fLogContents = new G4LogicalVolume(Add1, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center , fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 10*cm;
 }

if (fSourceMaterialID == 42){
    FoundID = true;
    density = 8.55*g/cm3; 
    sprintf(fSourceMaterialName,"Stainless Steel Pressure Relief Pipe");
    fMat = new G4Material("Stainless Steel",density,4);
   fMat->AddElement(elCr, mass_fraction = 17.5 * perCent); 
    fMat->AddElement(elFe, mass_fraction = 68.0 * perCent); 
    fMat->AddElement(elNi, mass_fraction = 12.0 * perCent); 
    fMat->AddElement(elMo, mass_fraction = 2.5 * perCent);
    G4double InnerRadius = 7.9/2*cm;
    G4double OuterRadius = 8.9/2*cm; //radially from can
    G4double Height = 3.3*cm; //vertically    
    G4ThreeVector Center(0,0, zp+Height/2);
    G4Tubs *VolSolid = new G4Tubs("Simulated Solid", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 15*cm; //A good distance away from the source
  }

if (fSourceMaterialID == 43){
    FoundID = true;
    density = 7.41*g/cm3; 
    sprintf(fSourceMaterialName,"Stainless Steel Pressure Vessel Dome: Semi Circle Version");
    fMat = new G4Material("Stainless Steel",density,4);
   fMat->AddElement(elCr, mass_fraction = 17.5 * perCent); 
    fMat->AddElement(elFe, mass_fraction = 68.0 * perCent); 
    fMat->AddElement(elNi, mass_fraction = 12.0 * perCent); 
    fMat->AddElement(elMo, mass_fraction = 2.5 * perCent);
    G4double InnerRadius = 0*cm;
    G4double OuterRadius = 3.4*cm; //radially from can
    G4double Height = 1*cm; //vertically    
    G4ThreeVector Center(0,-OuterRadius/2, zp+Height/2);
    G4Tubs *VolSolid = new G4Tubs("Simulated Solid", InnerRadius, OuterRadius, Height/2, 0*deg, 180*deg);
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 15*cm; //A good distance away from the source
  }
 
    if (fSourceMaterialID == 44){
    FoundID = true;
    density = 1.797*g/cm3;
    sprintf(fSourceMaterialName,"Kester Tin-Silver Solder");
    fMat =new G4Material("Solder",density,3);
    fMat->AddElement(elSn, mass_fraction = 96.5* perCent);
    fMat->AddElement(elAg, mass_fraction = 3.0 * perCent);
    fMat->AddElement(elCu, mass_fraction = 0.5 * perCent);

    G4double OuterRadius = 4.0*cm;
    G4double InnerRadius = 2.5*cm;
    G4double OuterHeight = 2.0*cm;

    G4Tubs *VolSolder = new G4Tubs("Lens 1",InnerRadius,OuterRadius,OuterHeight/2,0*deg,360*deg);
    G4ThreeVector Center(0, 0, zp+OuterHeight/2);
    
    
    fLogContents = new G4LogicalVolume(VolSolder, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 10*cm; //>2 * greatest distance from center of Ge crystal
    
  }

    if (fSourceMaterialID == 45){
    FoundID = true;
    density = 8.596*g/cm3; //mass = 3242.4g, V = 377.19cm^3
    sprintf(fSourceMaterialName,"Copper Sheet");
    fMat =new G4Material("Copper",density,1);
    fMat->AddElement(elCu, mass_fraction = 100 * perCent);
    
    G4double Radius = 15.5*cm;
    G4double Height = 20*mm;
   
    G4Tubs *Cyl = new G4Tubs("Quarter Disk",0,Radius,Height/2,0*deg,90*deg);
    G4ThreeVector Center(-7.0*cm,-6.0*cm,zp+Height/2);

    fLogContents = new G4LogicalVolume(Cyl, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 20*cm; //>2 * greatest distance from center of Ge crystal

  }

    if (fSourceMaterialID == 46){
    	FoundID = true;
   	density = 0.657*g/cm3; //18.066g/27.5 cm# 
    	sprintf(fSourceMaterialName,"Vespel Plastic Annulus");
    	fMat = new G4Material("Vespel Plastic Annulus",density,4);
	//using C10 H2  O6  and   C12 H12  N2 O for composition
        fMat->AddElement(elC, n_atoms = 22);
        fMat->AddElement(elH, n_atoms = 14);
        fMat->AddElement(elN, n_atoms = 2);
        fMat->AddElement(elO, n_atoms = 7);
    	G4double InnerRadius = 3.3/2*cm;
    	G4double OuterRadius = 8.0/2*cm; //radially from can
    	G4double Height = 0.66*cm; //vertically    
    	G4ThreeVector Center(0,0, zp+Height/2);
    	G4Tubs *VolSolid = new G4Tubs("Simulated Solid", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    	fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    	fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    	dBoundingBoxLength = 15*cm; //A good distance away from the source
  }

    if (fSourceMaterialID == 47){
    FoundID = true;
    density = 1.612*g/cm3; //
    sprintf(fSourceMaterialName,"SS connector");
    fMat= new G4Material("SS connector",density,4);
    fMat->AddElement(elNi, mass_fraction = 12 * perCent);
    fMat->AddElement(elMo, mass_fraction = 2.5 * perCent);
    fMat->AddElement(elCr, mass_fraction = 17.5 * perCent);
    fMat->AddElement(elFe, mass_fraction = 68.0 * perCent);


    G4double InnerRadius = 0;
    G4double OuterRadius = 0.363*cm;
    G4double OuterHeight = 8.4*cm;


    G4Tubs *Cyl1 = new G4Tubs("Cylinder1", InnerRadius, OuterRadius, OuterHeight/2, 0*deg, 360*deg);
    G4ThreeVector Center(0, 0, zp+OuterRadius/2+OuterRadius/2);
    G4RotationMatrix *Rot1= new G4RotationMatrix();
    Rot1->rotateX(90*deg);

    G4LogicalVolume *fLogLong = new G4LogicalVolume(Cyl1, fMat, "LogLong",0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyLong = new G4PVPlacement( noRotation,G4ThreeVector(0,0,0), fLogLong, "Long", logdetector, false, 0);


    fLogContents = new G4LogicalVolume(Cyl1, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(Rot1, Center, fLogContents, "Source Solid", logdetector, false, 0);
  
    dBoundingBoxLength = -1;  //active area is 1mm in radius, 1.2mm in height

    dBBxlo = -OuterRadius + 1*mm ;
    dBBxhi = OuterRadius - 1*mm;
    dBBylo = -OuterRadius + 1*mm;
    dBByhi = OuterRadius - 1*mm;
    dBBzlo = 0;
    dBBzhi = OuterHeight + 1*mm;  
  }

    if (fSourceMaterialID == 48){
    FoundID = true;
    //gopher Copper "L" shaped pieces formed into square, 45.0 g on top of large acrylic stand 220517
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    density = 8.96*g/cm3; 
    sprintf(fSourceMaterialName,"Copper Plates");
    fMat = new G4Material("Copper",density,1);
    fMat->AddElement(elCu, mass_fraction = 100.0 * perCent);
    
    G4double OLength = 8.0*cm; //Outside of Hollow Square
    G4double ILength = 7.0*cm; //Inside of Hollow Square
    G4double Height =  0.5*cm; //vertically  

    G4double LengthA = 25.4*cm; //perpendicular to can
    G4double WidthA = 19.05*cm; //radially from can
    G4double HeightA = 0.47625*cm; //vertically  

    // Placed centered on top of can:
    G4ThreeVector Center(0,0, zp+Height/2+HeightA);
    G4ThreeVector CenterA(0,0, zp+HeightA/2);

    //define source geometry however you want. 
    G4Box *square1 = new G4Box("Copper Outside",OLength/2,OLength/2,Height/2); 
    G4Box *square2 = new G4Box("Copper Inside",ILength/2,ILength/2,Height/2); 
    G4SubtractionSolid *VolSolid = new G4SubtractionSolid("Copper Hollow Square", square1, square2);
    G4Box *VolSolidA = new G4Box("Acrylic Stand", LengthA/2, WidthA/2, HeightA/2);
        
    G4LogicalVolume *fLogAcrylicStand = new G4LogicalVolume(VolSolidA, fMatAcrylic, "LogAcryclicStand", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyAcrylicStand = new G4PVPlacement(noRotation, CenterA, fLogAcrylicStand, "Acrylic Stand", logdetector, false, 0); 
    
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
 
    dBoundingBoxLength = -1;  //active area is 1mm larger than the shell of the square

    dBBxlo = -OLength/2 + 1*mm ;
    dBBxhi = OLength/2 - 1*mm;
    dBBylo = -OLength/2 + 1*mm ;
    dBByhi = OLength - 1*mm ;
    dBBzlo = zp+HeightA - 1*mm ;
    dBBzhi = zp+HeightA+Height + 1*mm;
  }

    if (fSourceMaterialID == 49){
    FoundID = true;
    //gopher SMA Coax Cable, coiled into a toroid, 18.9 on top of large acrylic stand 220531
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    density = 2.17893*g/cm3; // Effective density 18.9 g / 8.674 cm^3
    sprintf(fSourceMaterialName,"SMA Cable");
    fMat = new G4Material("Copper",density,1); // Assume copper core
    fMat->AddElement(elCu, mass_fraction = 100.0 * perCent);
    
    G4double OLength = 7.0*cm; //Outside of Toroid
    G4double ILength = 5.5*cm; //Inside of Toroid
    G4double Height =  0.75*cm; //vertically  

    G4double LengthA = 25.4*cm; //perpendicular to can
    G4double WidthA = 19.05*cm; //radially from can
    G4double HeightA = 0.47625*cm; //vertically  

    // Placed centered on top of can:
    G4ThreeVector Center(0,0, zp+Height/2+HeightA);
    G4ThreeVector CenterA(0,0, zp+HeightA/2);

    //define source geometry however you want. 
    G4Tubs *VolSolid = new G4Tubs("SMACoaxCableOutside",ILength/2, OLength/2, Height/2, 0*deg, 360*deg); 
    G4Box *VolSolidA = new G4Box("Acrylic Stand", LengthA/2, WidthA/2, HeightA/2);
        
    G4LogicalVolume *fLogAcrylicStand = new G4LogicalVolume(VolSolidA, fMatAcrylic, "LogAcryclicStand", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyAcrylicStand = new G4PVPlacement(noRotation, CenterA, fLogAcrylicStand, "Acrylic Stand", logdetector, false, 0); 
    
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
 
    dBoundingBoxLength = -1;  //active area is 1mm larger than the shell of the square

    dBBxlo = -OLength/2 + 1*mm ;
    dBBxhi = OLength/2 - 1*mm;
    dBBylo = -OLength/2 + 1*mm ;
    dBByhi = OLength - 1*mm ;
    dBBzlo = zp+HeightA - 1*mm ;
    dBBzhi = zp+HeightA+Height + 1*mm;
  }

    if (fSourceMaterialID == 50){
        FoundID = true;
        density = 0.529*g/cm3; // 
        sprintf(fSourceMaterialName,"3M BMF blank filter");
        fMat = new G4Material("3M BMF Filter",density,2);
        fMat->AddElement(elC, n_atoms = 3);
        fMat->AddElement(elH, n_atoms = 6);
        
        G4double InnerRadius = 0.0*cm;
        G4double OuterRadius = 2.5*cm; //radially from can
        G4double Height = 0.52*cm; //vertically    
       
        G4ThreeVector Center(0,0, zp+Height/2);
        G4Tubs *VolSolid = new G4Tubs("Simulated Solid", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
        fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
        fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
        dBoundingBoxLength = 15*cm; //A good distance away from the source
  }

    if (fSourceMaterialID == 51){
        FoundID = true;
        density = 1.496*g/cm3; // 
        sprintf(fSourceMaterialName,"HC Q Glass filter");
        fMat = new G4Material("HC Q Glass filter",density,2);
        fMat->AddElement(elSi, n_atoms = 1);
        fMat->AddElement(elO, n_atoms = 2);

        G4double InnerRadius = 0.0*cm;
        G4double OuterRadius = 1.3*cm; //radially from can
        G4double Height = 0.52*cm; //vertically    

        G4ThreeVector Center(0,0, zp+Height/2);
        G4Tubs *VolSolid = new G4Tubs("Simulated Solid", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
        fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
        fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
        //dBoundingBoxLength = 7.5*cm; //A good distance away from the source
  
    dBoundingBoxLength = -1;  //active area is 1mm larger than the shell of the square

    dBBxlo = -OuterRadius + 1*mm ;
    dBBxhi = OuterRadius - 1*mm;
    dBBylo = -OuterRadius + 1*mm ;
    dBByhi = OuterRadius - 1*mm ;
    dBBzlo = zp+Height - 1*mm ;
    dBBzhi = zp+Height + 1*mm;
  }

    if (fSourceMaterialID == 52){
        FoundID = true;
        density = 0.741*g/cm3; // 
        sprintf(fSourceMaterialName,"HC Polypropylene blank filter");
        fMat = new G4Material("HC polypropylene blank filter",density,2);
        fMat->AddElement(elC, n_atoms = 3);
        fMat->AddElement(elH, n_atoms = 6);

        G4double InnerRadius = 0.0*cm;
        G4double OuterRadius = 1.3*cm; //radially from can
        G4double Height = 0.52*cm; //vertically    

        G4ThreeVector Center(0,0, zp+Height/2);
        G4Tubs *VolSolid = new G4Tubs("Simulated Solid", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
        fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
        fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);

    dBoundingBoxLength = -1;  //active area is 1mm larger than the shell of the square
    dBBxlo = -OuterRadius + 1*mm ;
    dBBxhi = OuterRadius - 1*mm;
    dBBylo = -OuterRadius + 1*mm ;
    dBByhi = OuterRadius - 1*mm ;
    dBBzlo = zp+Height - 1*mm ;
    dBBzhi = zp+Height + 1*mm;
  }

    if (fSourceMaterialID == 53){
        FoundID = true;
        density = 0.0303*g/cm3; // 
        sprintf(fSourceMaterialName,"HC Polypropylene AlphaPERM blank filter");
        fMat = new G4Material("AlphaPERM polypropylene blank filter",density,2);
        fMat->AddElement(elC, n_atoms = 3);
        fMat->AddElement(elH, n_atoms = 6);

        G4double InnerRadius = 0.0*cm;
        G4double OuterRadius = 1.27*cm; //radially from can
        G4double Height = 0.52*cm; //vertically    

        G4ThreeVector Center(0,0, zp+Height/2);
        G4Tubs *VolSolid = new G4Tubs("Simulated Solid", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
        fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
        fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);

    dBoundingBoxLength = -1;  //active area is 1mm larger than the shell of the square
    dBBxlo = -OuterRadius + 1*mm ;
    dBBxhi = OuterRadius - 1*mm;
    dBBylo = -OuterRadius + 1*mm ;
    dBByhi = OuterRadius - 1*mm ;
    dBBzlo = zp+Height - 1*mm ;
    dBBzhi = zp+Height + 1*mm;
  }

    if (fSourceMaterialID == 54){
        FoundID = true;
        density = 2.234*g/cm3; // 
        sprintf(fSourceMaterialName,"QBITS, EZform Cables");
        fMat = new G4Material("EXform Cables",density,1);
        fMat->AddElement(elAl, mass_fraction = 100 * perCent);

        G4double InnerRadius = 8.8/2*cm;
        G4double OuterRadius = 9.2/2*cm; 
        G4double Height = 0.4*cm;     

        G4ThreeVector Center(0,0, zp+Height/2);
        G4Tubs *VolSolid = new G4Tubs("Simulated Solid", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
        fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
        fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);

    dBoundingBoxLength = -1;  //active area is 1mm larger than the shell of the square
    dBBxlo = -OuterRadius + 1*mm ;
    dBBxhi = OuterRadius - 1*mm;
    dBBylo = -OuterRadius + 1*mm ;
    dBByhi = OuterRadius - 1*mm ;
    dBBzlo = zp+Height - 1*mm ;
    dBBzhi = zp+Height + 1*mm;
  }
  
    if (fSourceMaterialID == 55){
    FoundID = true;
    //gopher Small M3 Brass Threaded Rod, 1.1 g on top of large acrylic stand 220615
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    density = 8.55*g/cm3;
    sprintf(fSourceMaterialName,"M3 Brass Threaded Rod");
    fMat = new G4Material("Brass",density,4);
    fMat->AddElement(elCu, mass_fraction = 0.7 * perCent);
    fMat->AddElement(elFe, mass_fraction = 0.0005 * perCent);
    fMat->AddElement(elPb, mass_fraction = 0.0007 * perCent);
    fMat->AddElement(elZn, mass_fraction = 0.2988 * perCent);
 
    G4double InnerRadius = 0;
    G4double OuterRadius = 0.1*cm;
    G4double Length      = 2.6*cm;

    G4double LengthA = 25.4*cm; //perpendicular to can
    G4double WidthA = 19.05*cm; //radially from can
    G4double HeightA = 0.47625*cm; //vertically  

    // Placed centered on top of can:
    G4ThreeVector Center(0,0, zp+OuterRadius+HeightA);
    G4ThreeVector CenterA(0,0, zp+HeightA/2);

    //define source geometry however you want. 
    G4Tubs *VolSolid = new G4Tubs("Brass Cylinder",InnerRadius, OuterRadius, Length/2, 0*deg, 360*deg); 
    G4Box *VolSolidA = new G4Box("Acrylic Stand", LengthA/2, WidthA/2, HeightA/2);
    G4RotationMatrix *Rot1= new G4RotationMatrix();
    Rot1->rotateX(90*deg);

    G4LogicalVolume *fLogAcrylicStand = new G4LogicalVolume(VolSolidA, fMatAcrylic, "LogAcryclicStand", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyAcrylicStand = new G4PVPlacement(noRotation, CenterA, fLogAcrylicStand, "Acrylic Stand", logdetector, false, 0); 
    
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(Rot1, Center, fLogContents, "Source Solid", logdetector, false, 0);
 
    dBoundingBoxLength = -1;  //active area is 1mm larger than the shell of the square

    dBBxlo = -OuterRadius + 1*mm ;
    dBBxhi = OuterRadius  - 1*mm;
    dBBylo = -Length + 1*mm ;
    dBByhi = Length - 1*mm ;
    dBBzlo = zp+HeightA - 1*mm ;
    dBBzhi = zp+HeightA+OuterRadius + 1*mm;
  }

    if (fSourceMaterialID == 56){
    FoundID = true;
    //gopher Type 101 Copper Rod, 198.5 g on top of large acrylic stand 220628
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    density = 8.96*g/cm3;
    sprintf(fSourceMaterialName,"Type 101 Copper Rod");
    fMat = new G4Material("Copper",density,1);
    fMat->AddElement(elCu, mass_fraction = 100.0 * perCent);
 
    G4double InnerRadius = 0;
    G4double OuterRadius = 1.8*cm;
    G4double Length      = 9.2*cm;

    G4double LengthA = 25.4*cm; //perpendicular to can
    G4double WidthA = 19.05*cm; //radially from can
    G4double HeightA = 0.47625*cm; //vertically  

    // Placed centered on top of can:
    G4ThreeVector Center(0,0, zp+OuterRadius+HeightA);
    G4ThreeVector CenterA(0,0, zp+HeightA/2);

    //define source geometry however you want. 
    G4Tubs *VolSolid = new G4Tubs("Copper Cylinder",InnerRadius, OuterRadius, Length/2, 0*deg, 360*deg); 
    G4Box *VolSolidA = new G4Box("Acrylic Stand", LengthA/2, WidthA/2, HeightA/2);
    G4RotationMatrix *Rot1= new G4RotationMatrix();
    Rot1->rotateX(90*deg);

    G4LogicalVolume *fLogAcrylicStand = new G4LogicalVolume(VolSolidA, fMatAcrylic, "LogAcryclicStand", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyAcrylicStand = new G4PVPlacement(noRotation, CenterA, fLogAcrylicStand, "Acrylic Stand", logdetector, false, 0); 
    
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(Rot1, Center, fLogContents, "Source Solid", logdetector, false, 0);
 
    dBoundingBoxLength = -1;  //active area is 1mm larger than the shell of the square

    dBBxlo = -OuterRadius + 1*mm ;
    dBBxhi = OuterRadius  - 1*mm;
    dBBylo = -Length + 1*mm ;
    dBByhi = Length - 1*mm ;
    dBBzlo = zp+HeightA - 1*mm ;
    dBBzhi = zp+HeightA+OuterRadius + 1*mm;
  }
  
    if (fSourceMaterialID == 57){
    FoundID = true;
    //gopher Type 510 Bronze Rod, 205.9 g on top of large acrylic stand Run: 220818
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    density = 8.86*g/cm3;
    sprintf(fSourceMaterialName,"Type 510 Bronze Rod");
    fMat = new G4Material("Bronze",density,2);
    fMat->AddElement(elCu, mass_fraction = 95.0 * perCent);
    fMat->AddElement(elSn, mass_fraction = 5.0 * perCent);
 
    G4double InnerRadius = 0;
    G4double OuterRadius = 2.54*cm;
    G4double Length      = 4.5*cm;

    G4double LengthA = 25.4*cm; //perpendicular to can
    G4double WidthA = 19.05*cm; //radially from can
    G4double HeightA = 0.47625*cm; //vertically  

    // Placed centered on top of can:
    G4ThreeVector Center(0,0, zp+OuterRadius+HeightA);
    G4ThreeVector CenterA(0,0, zp+HeightA/2);

    //define source geometry however you want. 
    G4Tubs *VolSolid = new G4Tubs("Bronze Cylinder",InnerRadius, OuterRadius, Length/2, 0*deg, 360*deg); 
    G4Box *VolSolidA = new G4Box("Acrylic Stand", LengthA/2, WidthA/2, HeightA/2);
    G4RotationMatrix *Rot1= new G4RotationMatrix();
    Rot1->rotateX(90*deg);

    G4LogicalVolume *fLogAcrylicStand = new G4LogicalVolume(VolSolidA, fMatAcrylic, "LogAcryclicStand", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyAcrylicStand = new G4PVPlacement(noRotation, CenterA, fLogAcrylicStand, "Acrylic Stand", logdetector, false, 0); 
    
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(Rot1, Center, fLogContents, "Source Solid", logdetector, false, 0);
 
    dBoundingBoxLength = -1;  //active area is 1mm larger than the shell of the square

    dBBxlo = -OuterRadius + 1*mm ;
    dBBxhi = OuterRadius  - 1*mm;
    dBBylo = -Length + 1*mm ;
    dBByhi = Length - 1*mm ;
    dBBzlo = zp+HeightA - 1*mm ;
    dBBzhi = zp+HeightA+OuterRadius + 1*mm;
  }
        
    if (fSourceMaterialID == 58){
    FoundID = true;
    //gopher Nb Superconducting Coax Cable, 9.0 g on top of large acrylic stand, Run 220726
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    density = 4.59*g/cm3;  // Effective Density: 9.0 g / 1.96 cm^3 
    sprintf(fSourceMaterialName,"Nb Coax Cable");
    fMat = new G4Material("Nb Coax",density,1);
    fMat->AddElement(elNb, mass_fraction = 100.0 * perCent);
 
    G4double InnerRadius = 0;
    G4double OuterRadius = 0.2*cm;
    G4double Length      = 15.6*cm;

    G4double LengthA = 25.4*cm; //perpendicular to can
    G4double WidthA = 19.05*cm; //radially from can
    G4double HeightA = 0.47625*cm; //vertically  

    // Placed centered on top of can:
    G4ThreeVector Center(0,0, zp+OuterRadius+HeightA);
    G4ThreeVector CenterA(0,0, zp+HeightA/2);

    //define source geometry however you want. 
    G4Tubs *VolSolid = new G4Tubs("Nb Cable",InnerRadius, OuterRadius, Length/2, 0*deg, 360*deg); 
    G4Box *VolSolidA = new G4Box("Acrylic Stand", LengthA/2, WidthA/2, HeightA/2);
    G4RotationMatrix *Rot1= new G4RotationMatrix();
    Rot1->rotateX(90*deg);

    G4LogicalVolume *fLogAcrylicStand = new G4LogicalVolume(VolSolidA, fMatAcrylic, "LogAcryclicStand", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyAcrylicStand = new G4PVPlacement(noRotation, CenterA, fLogAcrylicStand, "Acrylic Stand", logdetector, false, 0); 
    
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(Rot1, Center, fLogContents, "Source Solid", logdetector, false, 0);
 
    dBoundingBoxLength = -1;  //active area is 1mm larger than the shell of the square

    dBBxlo = -OuterRadius + 1*mm ;
    dBBxhi = OuterRadius  - 1*mm;
    dBBylo = -Length + 1*mm ;
    dBByhi = Length - 1*mm ;
    dBBzlo = zp+HeightA - 1*mm ;
    dBBzhi = zp+HeightA+OuterRadius + 1*mm;
  }

    if (fSourceMaterialID == 59){
    FoundID = true;
    //gopher Stainless Steel Coax Cable, 39.9 g on top of large acrylic stand, Run 220805
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    density = 1.36*g/cm3;  // Effective Density: 39.9 g / 29.26 cm^3 
    sprintf(fSourceMaterialName,"Stainless Steel Cable");
    fMat= new G4Material("SS connector",density,4);
    fMat->AddElement(elNi, mass_fraction = 12 * perCent);
    fMat->AddElement(elMo, mass_fraction = 2.5 * perCent);
    fMat->AddElement(elCr, mass_fraction = 17.5 * perCent);
    fMat->AddElement(elFe, mass_fraction = 68.0 * perCent);

    G4double InnerRadius = 0;
    G4double OuterRadius = 0.6*cm;
    G4double Length      = 25.87*cm;

    G4double LengthA = 25.4*cm; //perpendicular to can
    G4double WidthA = 19.05*cm; //radially from can
    G4double HeightA = 0.47625*cm; //vertically  

    // Placed centered on top of can:
    G4ThreeVector Center(0,0, zp+OuterRadius+HeightA);
    G4ThreeVector CenterA(0,0, zp+HeightA/2);

    //define source geometry however you want. 
    G4Tubs *VolSolid = new G4Tubs("Stainless Steel Cable",InnerRadius, OuterRadius, Length/2, 0*deg, 360*deg); 
    G4Box *VolSolidA = new G4Box("Acrylic Stand", LengthA/2, WidthA/2, HeightA/2);
    G4RotationMatrix *Rot1= new G4RotationMatrix();
    Rot1->rotateX(90*deg);

    G4LogicalVolume *fLogAcrylicStand = new G4LogicalVolume(VolSolidA, fMatAcrylic, "LogAcryclicStand", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyAcrylicStand = new G4PVPlacement(noRotation, CenterA, fLogAcrylicStand, "Acrylic Stand", logdetector, false, 0); 
    
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(Rot1, Center, fLogContents, "Source Solid", logdetector, false, 0);
 
    dBoundingBoxLength = -1;  //active area is 1mm larger than the shell of the square

    dBBxlo = -OuterRadius + 1*mm ;
    dBBxhi = OuterRadius  - 1*mm;
    dBBylo = -Length + 1*mm ;
    dBByhi = Length - 1*mm ;
    dBBzlo = zp+HeightA - 1*mm ;
    dBBzhi = zp+HeightA+OuterRadius + 1*mm;
  }

 if (fSourceMaterialID == 60 ){
    //QBITS-CUTE L01 Amumetal Shield
    //Counted in Lively: Runs 220712, 220720, 20721, 22072101
    FoundID = true;
    density = 11.8*g/cm3; //Effective Density: 49.6g/4.2cm^3 estimated vol of a double capped cylinder
    sprintf(fSourceMaterialName,"Amumetal Shield");
    fMat = new G4Material("Amumetal",density,2); //Using generic composition
    fMat->AddElement(elFe, mass_fraction = 70.0 * perCent);
    fMat->AddElement(elNi, mass_fraction = 30.0 * perCent);
   
 
    G4double InnerRadius = 2.5/2*cm; //estimating wall thickness
    G4double OuterRadius = 2.7/2*cm; //radially from can
    G4double Height = 3.9*cm; //vertically
    G4double OuterRadiusCap = 2.9/2*cm;
    G4double InnerRadiusCap = 0*cm;
    G4double HeightCap = 0.3*cm;  

//    G4ThreeVector Center(0,0, zp+Height/2);

    G4RotationMatrix *Rot1= new G4RotationMatrix();
    Rot1->rotateX(90*deg);


    G4Tubs *VolSolid = new G4Tubs("Simulated Solid", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    G4ThreeVector Center(0,0, Height/2+HeightCap/2);


    G4Tubs *TopCap = new G4Tubs("Simulated Solid", InnerRadiusCap, OuterRadiusCap, HeightCap/2, 0*deg, 360*deg);
    G4ThreeVector CenterTop(0,-Height/2-HeightCap/2, Height+HeightCap+OuterRadiusCap+0.2*cm);


    G4Tubs *BottomCap = new G4Tubs("Simulated Solid", InnerRadiusCap, OuterRadiusCap, HeightCap/2, 0*deg, 360*deg);
    G4ThreeVector CenterBottom(0,0, Height+HeightCap);

    G4VSolid* Vol12 = new G4UnionSolid("Tube + Top Cap", TopCap, VolSolid, noRotation, Center);
    G4VSolid* Vol123 = new G4UnionSolid("Tube + Top Cap + Bottom Cap",Vol12, BottomCap, noRotation, CenterBottom);

    fLogContents = new G4LogicalVolume(Vol123, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(Rot1, CenterTop, fLogContents, "Source Solid", logdetector, false, 0);

    dBoundingBoxLength = 15*cm; //A good distance away from the source
  }

 if (fSourceMaterialID == 61 ){
    //QBITS-CUTE L01 Amumetal Shield
    //Counted in Lively: Runs 220805 to 220805
    FoundID = true;
    density = 1.85*g/cm3; //Effective Density: 593.3/319.92cm^3 estimated vol of a double capped cylinder
    sprintf(fSourceMaterialName,"Aluminum Shield");
    fMat = new G4Material("Aluminum Shield",density,1); //Using generic composition
    fMat->AddElement(elAl, mass_fraction = 100.0 * perCent);

    G4double InnerRadius = 8.8/2*cm; //estimating wall thickness
    G4double OuterRadius = 9.8/2*cm; //radially from can
    G4double Height = 21.9*cm; //vertically

    G4Tubs *VolSolid = new G4Tubs("Simulated Solid", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    G4ThreeVector Center(0,0, zp + OuterRadius);

    G4RotationMatrix *Rot1= new G4RotationMatrix();
    Rot1->rotateX(90*deg);

    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(Rot1, Center, fLogContents, "Source Solid", logdetector, false, 0);

    dBoundingBoxLength = 15*cm; //A good distance away from the source
  }

  if (fSourceMaterialID == 62){
    FoundID = true;
    //Copper Nickel Cables, 7.2 g, Counted on Lively Runs 22081701 and 22081701
    density = 8.94*g/cm3;  // Using the standard density for cupronickel and neglecting the connectors

    sprintf(fSourceMaterialName,"Cu-Ni  Cable");
    fMat = new G4Material("Cu-Ni",density,2);//using standard 70% Cu /30 Ni ratio
    fMat->AddElement(elCu, mass_fraction = 70.0 * perCent);
    fMat->AddElement(elNi, mass_fraction = 30.0 * perCent);

    G4double InnerRadius = 0;
    G4double OuterRadius = 0.5*mm;
    G4double Length      = 20.5*cm;

    G4ThreeVector Center(0,0, zp + OuterRadius);

    G4RotationMatrix *Rot1= new G4RotationMatrix();
    Rot1->rotateX(90*deg);

    G4Tubs *VolSolid = new G4Tubs("Cu-Ni Cable",InnerRadius, OuterRadius, Length/2, 0*deg, 360*deg);
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(Rot1, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = -1;  //active area is 1mm larger than the shell of the square

    dBBylo = -OuterRadius + 1*mm ;
    dBByhi = OuterRadius  - 1*mm;
    dBBxlo = -Length/2 + 1*mm ;
    dBBxhi = Length/2 - 1*mm ;
    dBBzlo = zp+OuterRadius - 1*mm ;
    dBBzhi = zp+OuterRadius + 1*mm;

 }

    if (fSourceMaterialID == 63){
    FoundID = true;
    density = 3.96341*g/cm3;
    sprintf(fSourceMaterialName,"HALO Cf-252 Sample");
    fMat =new G4Material("304SS",density,6);
    fMat->AddElement(elMn, mass_fraction = 2.0* perCent);
    fMat->AddElement(elSi, mass_fraction = 0.75 * perCent);
    fMat->AddElement(elCr, mass_fraction = 19.0 * perCent);
    fMat->AddElement(elNi, mass_fraction = 11.15 * perCent);
    fMat->AddElement(elN, mass_fraction = 0.1 * perCent);
    fMat->AddElement(elFe, mass_fraction = 67 * perCent);

    G4double InnerRadius = 0*cm;

    G4double OuterRadius1 = .56*cm;//Larger central cylinder
    G4double OuterHeight1 = 6.985*cm;

    G4double OuterRadius2 = 0.24*cm;//Cylinders on top and bottom of geometry
    G4double OuterHeight2 = 1.27*cm;

    G4double OuterHeight3 = OuterHeight1 + OuterHeight2;

    G4double CavityRadius = 0.20*cm;//Inner Cylindrical empty space to be subtracted
    G4double CavityHeight = 4.0*cm;
    G4double CavityLength = 1.01*cm;

    G4Tubs *VolCyl1 = new G4Tubs("Middle cylinder",InnerRadius,OuterRadius1,OuterHeight1/2,0*deg,360*deg);
    G4ThreeVector Center1(0, 0, zp+OuterHeight1/2+OuterHeight2);

    G4Tubs *VolCyl2 = new G4Tubs("Bottom Cylinder",InnerRadius,OuterRadius2,OuterHeight2/2,0*deg,360*deg);
    G4ThreeVector Center2(0, 0, zp+OuterHeight2/2);

    G4Tubs *VolCyl3 = new G4Tubs("Top Cylinder",InnerRadius,OuterRadius2,OuterHeight2/2,0*deg,360*deg);
    G4ThreeVector Center3(0, 0, zp+OuterHeight2*3/2+OuterHeight1);

    G4Tubs *VolCav = new G4Tubs("Cavity",InnerRadius, CavityRadius,CavityLength/2,0*deg,360*deg);
    G4ThreeVector Center4(0, 0, zp+CavityHeight);

    G4ThreeVector Difference1 = Center1-Center2;
    G4ThreeVector Difference2 = Center3 - Center2;
    G4ThreeVector DifferenceCav = Center4 - Center2;
   
    G4RotationMatrix *Rot1= new G4RotationMatrix(0*deg,4*deg,0*deg);

    G4VSolid *midbot = new G4UnionSolid("Sample without cavity and top", VolCyl2, VolCyl1, noRotation, Difference1);
    G4VSolid *nocavity = new G4UnionSolid("Sample without cavity", midbot, VolCyl3, noRotation, Difference2);
    G4VSolid *FullSamp = new G4SubtractionSolid("Sample with cavity",nocavity, VolCav, noRotation, DifferenceCav);


    fLogContents = new G4LogicalVolume(FullSamp, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(Rot1, G4ThreeVector(0,0,-OuterHeight2/2), fLogContents, "Source Solid", logdetector, false, 0);

    dBoundingBoxLength=-1;  //Flag from standard Bounding Box
    dBBxlo = - 10.5*mm;
    dBBxhi = 10.5*mm;
    dBBylo = - 10.5*mm;
    dBByhi = 10.5*mm;
    dBBzlo = - zp - 1*mm;
    dBBzhi = zp + OuterHeight3 + 1*mm;

} 

    if (fSourceMaterialID == 64){
    FoundID = true;
    density = 5.9465*g/cm3;
    //Since the 'Dummy' Sample is 1.5 times the mass of the one containing Cf-252 it might be worth taking 
    //measurements of it prior to running this geometry 
    sprintf(fSourceMaterialName,"HALO 'Dummy' Cf-252 Sample");
    fMat =new G4Material("304SS",density,6);
    fMat->AddElement(elMn, mass_fraction = 2.0* perCent);
    fMat->AddElement(elSi, mass_fraction = 0.75 * perCent);
    fMat->AddElement(elCr, mass_fraction = 19.0 * perCent);
    fMat->AddElement(elNi, mass_fraction = 11.15 * perCent);
    fMat->AddElement(elN, mass_fraction = 0.1 * perCent);
    fMat->AddElement(elFe, mass_fraction = 67 * perCent);

    G4double InnerRadius = 0*cm;

    G4double OuterRadius1 = .56*cm;//Larger central cylinder
    G4double OuterHeight1 = 6.985*cm;

    G4double OuterRadius2 = 0.24*cm;//Cylinders on top and bottom of geometry
    G4double OuterHeight2 = 1.27*cm;

    G4double OuterHeight3 = OuterHeight1 + OuterHeight2;

    G4double CavityRadius = 0.20*cm;//Inner Cylindrical empty space to be subtracted
    G4double CavityHeight = 4.0*cm;
    G4double CavityLength = 1.01*cm;

    G4Tubs *VolCyl1 = new G4Tubs("Middle cylinder",InnerRadius,OuterRadius1,OuterHeight1/2,0*deg,360*deg);
    G4ThreeVector Center1(0, 0, zp+OuterHeight1/2+OuterHeight2);

    G4Tubs *VolCyl2 = new G4Tubs("Bottom Cylinder",InnerRadius,OuterRadius2,OuterHeight2/2,0*deg,360*deg);
    G4ThreeVector Center2(0, 0, zp+OuterHeight2/2);

    G4Tubs *VolCyl3 = new G4Tubs("Top Cylinder",InnerRadius,OuterRadius2,OuterHeight2/2,0*deg,360*deg);
    G4ThreeVector Center3(0, 0, zp+OuterHeight2*3/2+OuterHeight1);

    G4Tubs *VolCav = new G4Tubs("Cavity",InnerRadius, CavityRadius,CavityLength/2,0*deg,360*deg);
    G4ThreeVector Center4(0, 0, zp+CavityHeight);

    G4ThreeVector Difference1 = Center1-Center2;
    G4ThreeVector Difference2 = Center3 - Center2;
    G4ThreeVector DifferenceCav = Center4 - Center2;
   
    G4RotationMatrix *Rot1= new G4RotationMatrix(0*deg,4*deg,0*deg);

    G4VSolid *midbot = new G4UnionSolid("Sample without cavity and top", VolCyl2, VolCyl1, noRotation, Difference1);
    G4VSolid *nocavity = new G4UnionSolid("Sample without cavity", midbot, VolCyl3, noRotation, Difference2);
    G4VSolid *FullSamp = new G4SubtractionSolid("Sample with cavity",nocavity, VolCav, noRotation, DifferenceCav);


    fLogContents = new G4LogicalVolume(FullSamp, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(Rot1, G4ThreeVector(0,0,-OuterHeight2/2), fLogContents, "Source Solid", logdetector, false, 0);

    dBoundingBoxLength=-1;  //Flag from standard Bounding Box
    dBBxlo = - 10.5*mm;
    dBBxhi = 10.5*mm;
    dBBylo = - 10.5*mm;
    dBByhi = 10.5*mm;
    dBBzlo = - zp - 1*mm;
    dBBzhi = zp + OuterHeight3 + 1*mm;

} 
  
   if (fSourceMaterialID == 65){
    FoundID = true;
    //nEXO Exocor Executive 316Si Welding Rods, 1023.1 g on top of large acrylic stand 221118
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    density = 12.79*g/cm3; // Use effective density 1023.1 g / 80 cm^3
    sprintf(fSourceMaterialName,"nEXO 316Si Exocor Welding Rods");
    fMat = new G4Material("Welding Rods",density,6);
    fMat->AddElement(elFe, mass_fraction = 65.51 * perCent);
    fMat->AddElement(elCr, mass_fraction = 18.26 * perCent);
    fMat->AddElement(elNi, mass_fraction = 11.24 * perCent);
    fMat->AddElement(elMo, mass_fraction =  2.53 * perCent);
    fMat->AddElement(elMn, mass_fraction =  1.57 * perCent);
    fMat->AddElement(elSi, mass_fraction =  0.89 * perCent);

    G4double Length = 10.0*cm; //perpendicular to can
    G4double Width = 10.0*cm; //radially from can
    G4double Height = 0.8*cm; //vertically  

    G4double LengthA = 25.4*cm; //perpendicular to can
    G4double WidthA = 19.05*cm; //radially from can
    G4double HeightA = 0.47625*cm; //vertically  

    // Placed centered on top of can:
    G4ThreeVector Center(0,0, zp+Height/2+HeightA);
    G4ThreeVector CenterA(0,0, zp+HeightA/2);

    //define source geometry however you want. 
    G4Box *VolSolid = new G4Box("Simulated Solid", Length/2, Width/2, Height/2);
   
    G4Box *VolSolidA = new G4Box("Acrylic Stand", LengthA/2, WidthA/2, HeightA/2);
        
    G4LogicalVolume *fLogAcrylicStand = new G4LogicalVolume(VolSolidA, fMatAcrylic, "LogAcryclicStand", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyAcrylicStand = new G4PVPlacement(noRotation, CenterA, fLogAcrylicStand, "Acrylic Stand", logdetector, false, 0); 

    
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = -1;  //active area is 1mm larger than the shell of the square

    dBBxlo = -Length + 1*mm ;
    dBBxhi = Length  - 1*mm;
    dBBylo = -Width + 1*mm ;
    dBByhi = Width - 1*mm ;
    dBBzlo = zp+HeightA - 1*mm ;
    dBBzhi = zp+HeightA+Height + 1*mm;
  }
  
   if (fSourceMaterialID == 66){
    FoundID = true;
    //nEXO Exocor Executive 316L Welding Rods, 1003.3 g on top of large acrylic stand 221130
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    density = 12.79*g/cm3; // Use effective density 1003.3 g / 100 cm^3
    sprintf(fSourceMaterialName,"nEXO 316: Exocor Welding Rods");
    fMat = new G4Material("Welding Rods",density,6);
    fMat->AddElement(elFe, mass_fraction = 65.73 * perCent);
    fMat->AddElement(elCr, mass_fraction = 18.29 * perCent);
    fMat->AddElement(elNi, mass_fraction = 11.35 * perCent);
    fMat->AddElement(elMo, mass_fraction =  2.52 * perCent);
    fMat->AddElement(elMn, mass_fraction =  1.55 * perCent);
    fMat->AddElement(elSi, mass_fraction =  0.56 * perCent);

    G4double Length = 10.0*cm; //perpendicular to can
    G4double Width = 10.0*cm; //radially from can
    G4double Height = 1.0*cm; //vertically  

    G4double LengthA = 25.4*cm; //perpendicular to can
    G4double WidthA = 19.05*cm; //radially from can
    G4double HeightA = 0.47625*cm; //vertically  

    // Placed centered on top of can:
    G4ThreeVector Center(0,0, zp+Height/2+HeightA);
    G4ThreeVector CenterA(0,0, zp+HeightA/2);

    //define source geometry however you want. 
    G4Box *VolSolid = new G4Box("Simulated Solid", Length/2, Width/2, Height/2);
   
    G4Box *VolSolidA = new G4Box("Acrylic Stand", LengthA/2, WidthA/2, HeightA/2);
        
    G4LogicalVolume *fLogAcrylicStand = new G4LogicalVolume(VolSolidA, fMatAcrylic, "LogAcryclicStand", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyAcrylicStand = new G4PVPlacement(noRotation, CenterA, fLogAcrylicStand, "Acrylic Stand", logdetector, false, 0); 

    
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = -1;  //active area is 1mm larger than the shell of the square

    dBBxlo = -Length + 1*mm ;
    dBBxhi = Length  - 1*mm;
    dBBylo = -Width + 1*mm ;
    dBByhi = Width - 1*mm ;
    dBBzlo = zp+HeightA - 1*mm ;
    dBBzhi = zp+HeightA+Height + 1*mm;
  }  
  
 if (fSourceMaterialID == 67){
    FoundID = true;
    density = 9.0435; 
    sprintf(fSourceMaterialName,"OHFC Copper");
    fMat = new G4Material("Copper",density,1);
    fMat->AddElement(elCu, n_atoms = 1);
    
    G4double  pDz = 1.1*cm;
    G4double pTheta = 30.0*deg;
    G4double  pPhi = 0.0*deg;
    G4double pDy1 = 3.9*cm;
    G4double  pDx1 = 2.4*cm;
    G4double pDx2 = 2.4*cm;
    G4double  pAlp1 = 0.0*deg;
    G4double pDy2 = 3.9*cm;
    G4double  pDx3 = 0.5*mm; 
    G4double pDx4 = 0.5*mm;
    G4double  pAlp2 = 0.0*deg;

    G4Trap *VolSolid = new G4Trap("OHFC Copper Triangular Prism", pDz, pTheta, pPhi, pDy1, pDx1, pDx2, pAlp1, pDy2, pDx3, pDx4, pAlp2);
    
    G4ThreeVector Center(0.5*cm, 0, zp+pDz); 
    G4RotationMatrix *Rot1= new G4RotationMatrix(0*deg,0*deg,0*deg);


    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(Rot1, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 10*cm;
  }


if (fSourceMaterialID == 68){
    FoundID = true;
    density = 11.3319; 
    sprintf(fSourceMaterialName,"Used Aluminum(5)");//PGT230224
    fMat = new G4Material("Aluminum",density,1);
    fMat->AddElement(elAl, n_atoms = 1);
    
    G4double innerRad = 0.0*cm;
    G4double outerRad = 1.5*cm;
    G4double height = 0.5*cm;
    G4double initAng = 0*deg;
    G4double spanAng = 360*deg;

    G4RotationMatrix *Rot1= new G4RotationMatrix(0*deg,0*deg,0*deg);
    G4ThreeVector Difference1(-1.9*cm,2.6*cm,0);
    G4ThreeVector Difference2(-5*cm,1.7*cm,0);
    G4ThreeVector Difference3(-1.9*cm,-2.6*cm,0);
    G4ThreeVector Difference4(-5*cm,-1.7*cm,0);

    G4Tubs *VolSolid = new G4Tubs("Single Al Cyl", innerRad, outerRad, height, initAng, spanAng);
    G4VSolid *TwoCyl = new G4UnionSolid("Two Al Cyl", VolSolid, VolSolid, Rot1, Difference1);
    G4VSolid *ThreeCyl = new G4UnionSolid("Three Al Cyl", TwoCyl, VolSolid, Rot1, Difference2);    
    G4VSolid *FourCyl = new G4UnionSolid("Four Al Cyl", ThreeCyl, VolSolid, Rot1, Difference3);
    G4VSolid *FiveCyl = new G4UnionSolid("Five Al Cyl", FourCyl, VolSolid, Rot1, Difference4);

    G4ThreeVector Center(2.8*cm, 0, zp+height); 


    fLogContents = new G4LogicalVolume(FiveCyl, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(Rot1, Center, fLogContents, "Source Solid", logdetector, false, 0);
    
    dBoundingBoxLength=-1;  //Flag from standard Bounding Box
    dBBxlo = -7*cm + 1*mm ;
    dBBxhi = 7*cm  - 1*mm;
    dBBylo = -7*cm + 1*mm ;
    dBByhi = 7*cm - 1*mm ;
    dBBzlo = zp+height - 1*mm ;
    dBBzhi = zp+height + 1*mm;

  }


if (fSourceMaterialID == 69){
    FoundID = true;
    density = 2.305*g/cm3; 
    sprintf(fSourceMaterialName,"Fibregate");//PGT230221
    //We'll make one rectangle and union it to itself with various rotations and transpositions
    fMat = new G4Material("Fibregate",density,2);
    fMat->AddElement(elO, n_atoms = 2);
    fMat->AddElement(elSi, n_atoms = 1);

    G4double width = 0.4/2*cm;
    G4double midSpace = 3.4/2*cm;
    G4double endSpace = 1.4/2*cm;
    G4double height = 3.5/2*cm;
    G4double length = midSpace+width*2+endSpace*2;

    G4RotationMatrix *Rot1= new G4RotationMatrix(0*deg,0*deg,0*deg);
    G4RotationMatrix *Rot2= new G4RotationMatrix(90*deg,0*deg,0*deg);

    G4ThreeVector Difference1(midSpace, -midSpace,0);
    G4ThreeVector Difference2(0, -midSpace*2,0);
    G4ThreeVector Difference3(-midSpace,-midSpace,0); 

    G4Box *OneRec = new G4Box("Single Rec", length, width, height);
    G4VSolid *TwoRec = new G4UnionSolid("Two Rec", OneRec, OneRec, Rot2, Difference1);
    G4VSolid *ThreeRec = new G4UnionSolid("Three Rec", TwoRec, OneRec, Rot1, Difference2);    
    G4VSolid *FourRec = new G4UnionSolid("Four Rec", ThreeRec, OneRec, Rot2, Difference3);

    G4ThreeVector Center(0, midSpace, zp+height); 

    fLogContents = new G4LogicalVolume(FourRec, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(Rot1, Center, fLogContents, "Source Solid", logdetector, false, 0);
   
    dBoundingBoxLength=-1;  //Flag from standard Bounding Box
    dBBxlo = -length/2*cm + 1*mm ;
    dBBxhi = length/2*cm  - 1*mm;
    dBBylo = -length/2*cm + 1*mm ;
    dBByhi = length/2*cm - 1*mm ;
    dBBzlo = zp+height - 1*mm ;
    dBBzhi = zp+height + 1*mm;   
  }

    if (fSourceMaterialID == 70){
    FoundID = true;
    density = 5.061*g/cm3; //considered mass and volume for 2 lenses together
    sprintf(fSourceMaterialName,"2 Al melts");
    fMat =new G4Material("2 Al old melts",density,1);
    fMat->AddElement(elAl, n_atoms = 1);

    G4double OuterRadius = 1.25*cm;
    G4double OuterHeight = 0.5*cm;

    G4Tubs *Vol1 = new G4Tubs("Melt 1",0,OuterRadius,OuterHeight/2,0*deg,360*deg);
    G4Tubs *Vol2 = new G4Tubs("Melt 2",0,OuterRadius,OuterHeight/2,0*deg,360*deg);

    G4ThreeVector Center(0, 0, zp+OuterHeight/2);
    G4ThreeVector Right(OuterRadius, 0, zp+OuterHeight/2);
    G4ThreeVector Left(-OuterRadius, 0, zp+OuterHeight/2);

    G4VSolid *Add2 =  new G4UnionSolid("Add2", Vol1, Vol2, noRotation, Left-Right);

    fLogContents = new G4LogicalVolume(Add2, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Right, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 10*cm; //>2 * greatest distance from center of Ge crystal
  }


  if (fSourceMaterialID == 71){
    FoundID = true;
    density = 1.80*g/cm3; 
    G4double dens1 = 0.815*g/cm3;
    G4double dens2 = 2.94*g/cm3;
    G4double dens3 = 4.23*g/cm3;
    G4double dens4 = 3.34*g/cm3;
    G4double dens5 = 5.61*g/cm3;
    sprintf(fSourceMaterialName,"PGT 230317 PICO, Grinding Disk");
    
    G4Material* fMat_CH2O = new G4Material("CH2O", dens1, 3);
    fMat_CH2O->AddElement(elC, n_atoms = 1);
    fMat_CH2O->AddElement(elH, n_atoms = 2);
    fMat_CH2O->AddElement(elO, n_atoms = 1);

    G4Material* fMat_KAlF4 = new G4Material("KAlF4", dens2, 3);
    fMat_KAlF4->AddElement(elK, n_atoms=1);
    fMat_KAlF4->AddElement(elAl, n_atoms=1);
    fMat_KAlF4->AddElement(elF, n_atoms=4);

    G4Material* fMat_TiO2 = new G4Material("TiO2", dens3, 2);
    fMat_TiO2->AddElement(elTi, n_atoms = 1);
    fMat_TiO2->AddElement(elO, n_atoms=2);
     
    G4Material* fMat_CaO = new G4Material("CaO", dens4, 2);
    fMat_CaO->AddElement(elCa, n_atoms=1);
    fMat_CaO->AddElement(elO, n_atoms=1);

    G4Material* fMat_ZnO = new G4Material("ZnO", dens5, 2);
    fMat_ZnO->AddElement(elZn, n_atoms=1);
    fMat_ZnO->AddElement(elO, n_atoms=1);

    fMat = new G4Material("Grinding disk",density,8);
    fMat->AddMaterial(fMat_CH2O, mass_fraction = 20 * perCent);
    fMat->AddMaterial(fMat_KAlF4, mass_fraction = 20 * perCent);
    fMat->AddMaterial(fMat_TiO2, mass_fraction = 2 * perCent);
    fMat->AddMaterial(fMat_CaO, mass_fraction = 2 * perCent);
    fMat->AddMaterial(fMat_ZnO, mass_fraction = 2 * perCent);
    fMat->AddElement(elCr, mass_fraction = 10 * perCent);
    fMat->AddElement(elNi, mass_fraction =  5 * perCent);
    fMat->AddElement(elFe, mass_fraction =  39 * perCent);
    
    G4double InnerRadius = 2.3/2*cm;
    G4double OuterRadius = 12.5/2*cm; //radially from can
    G4double Height = 4.5*cm; //vertically    
    G4ThreeVector Center(0,0, zp+Height/2);
    G4Tubs *VolSolid = new G4Tubs("Simulated Solid", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 20*cm;
  }
    
 if (fSourceMaterialID == 72){
    FoundID = true;
    density = 14.1162; 
    sprintf(fSourceMaterialName,"Lively 230317, LB Lead Chevron Brick");
    fMat = new G4Material("LB Lead",density,1);
    fMat->AddElement(elPb, n_atoms = 1);
    
    G4double  pDz = 1.7*cm;
    G4double pTheta = 0.0*deg;
    G4double  pPhi = 0.0*deg;
    G4double pDy1 = 5.1*cm;
    G4double  pDx1 = 3*cm;
    G4double pDx2 = 3*cm;
    G4double  pAlp1 = 0.0*deg;
    G4double pDy2 = 5.1*cm;
    G4double  pDx3 = 0.5*mm; 
    G4double pDx4 = 0.5*mm;
    G4double  pAlp2 = 0.0*deg;

    G4RotationMatrix *Rot1= new G4RotationMatrix(0*deg,0*deg,0*deg);
    G4ThreeVector Diff(4.2*cm,0*cm,0*cm);

    G4Trap *VolTrap1 = new G4Trap("TriPrism1", pDz, pTheta, pPhi, pDy1, pDx1, pDx2, pAlp1, pDy2, pDx3, pDx4, pAlp2);
    G4Trap *VolTrap2 = new G4Trap("TriPrism2", pDz, pTheta, pPhi, pDy1, pDx1, pDx2, pAlp1, pDy2, pDx3, pDx4, pAlp2);
    G4VSolid *VolSolid = new G4UnionSolid("BothPrisms", VolTrap1, VolTrap2, Rot1, Diff);
    G4ThreeVector Center(-pDx1+.8*cm, 0, zp+pDz); 

    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(Rot1, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 10*cm;
  }

 if (fSourceMaterialID == 73){
    FoundID = true;
    density = 11.048; 
    sprintf(fSourceMaterialName,"Lively 230328, ULB partial circle");
    fMat = new G4Material("LB Lead",density,1);
    fMat->AddElement(elPb, n_atoms = 1);

    G4double InnerRadius = 0*cm;
    G4double  OuterRadius = 11.43*cm;//Found from some calculus
    G4double Height = .95*cm;

    G4RotationMatrix *Rot1= new G4RotationMatrix(0*deg,0*deg,0*deg);
    G4ThreeVector Diff(5.08*cm,0*cm,OuterRadius-5*mm);

    G4Tubs *VolCyl = new G4Tubs("Full Cylinder", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    G4Box *VolBox = new G4Box("Box",OuterRadius,OuterRadius,OuterRadius);
    G4VSolid *VolSolid = new G4SubtractionSolid("BothPrisms", VolCyl, VolBox, Rot1, Diff);
    G4ThreeVector Center(7.62*cm, 0, zp+5*mm); 

    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(Rot1, Center, fLogContents, "Source Solid", logdetector, false, 0);
    
    dBoundingBoxLength=-1;  //Flag from standard Bounding Box
    dBBxlo = -OuterRadius - 1*mm ;
    dBBxhi = OuterRadius  + 1*mm;
    dBBylo = -OuterRadius - 1*mm ;
    dBByhi = OuterRadius + 1*mm ;
    dBBzlo = zp - Height - 1*mm ;
    dBBzhi = zp+Height + 1*mm;
  }

  if (fSourceMaterialID == 74){
    FoundID = true;
    density = 7.924*g/cm3;
    sprintf(fSourceMaterialName,"PGT, 230320, QBITS-CUTE, Cu disk");
    fMat = new G4Material("Cu Disk",density,1);
    fMat->AddElement(elCu, mass_fraction = 100 * perCent);

    G4double InnerRadius = 0*mm;
    G4double  OuterRadius = 55/2*mm;//
    G4double Height = 5*mm;

    G4ThreeVector Center(0,0, zp+Height/2);
    G4Tubs *VolSolid = new G4Tubs("Simulated Solid", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 10*cm;
  }

  if (fSourceMaterialID == 75){
    FoundID = true;
    density = 1.537*g/cm3;
    sprintf(fSourceMaterialName,"PGT, 230404, QBITS-CUTE, Al semidisk");
    fMat = new G4Material("Al Semi Disk",density,1);
    fMat->AddElement(elAl, mass_fraction = 100 * perCent);

    G4double InnerRadius = 4.3/2*cm;
    G4double  OuterRadius = 10.5/2*cm;//
    G4double Height = 3*mm;

    G4ThreeVector Center(0,0, zp+Height/2);
    G4Tubs *VolSolid = new G4Tubs("Simulated Solid", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 20*cm;
  }


  if (fSourceMaterialID == 76){
    FoundID = true;
    density = 1.168*g/cm3;//Mass: 9.465g, Volume (in cm3): 0.1 * pi * (10.16/2)^2 = 8.107cm3
    sprintf(fSourceMaterialName,"Lively, 230411, QBITS-CUTE, Si disk");
    fMat = new G4Material("Si Disk",density,1);
    fMat->AddElement(elSi, mass_fraction = 100 * perCent);

    G4double InnerRadius = 0*cm;
    G4double  OuterRadius = 10.16/2*cm;//4 inches -> 10.16 cm
    G4double Height = 1*mm;

    G4ThreeVector Center(0,0, zp+Height/2);
    G4Tubs *VolSolid = new G4Tubs("Simulated Solid", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength=-1; //Flag from standard Bounding Box
    dBBxlo = -OuterRadius - 1*mm;
    dBBxhi = OuterRadius + 1*mm;
    dBBylo = -OuterRadius - 1*mm;
    dBByhi = OuterRadius + 1*mm;
    dBBzlo = zp - Height - 1*mm;
    dBBzhi = zp + Height + 1*mm;
  }

  if (fSourceMaterialID == 77){
    FoundID = true;
    density = 1.345*g/cm3;//Mass: 2*2.726g, Volume (in cm3): 0.2 * pi * (5.08/2)^2 =4.054cm3
    sprintf(fSourceMaterialName,"Lively, 230425, QBITS-CUTE L06, Si disk");
    fMat = new G4Material("Si Disk",density,1);
    fMat->AddElement(elSi, mass_fraction = 100 * perCent);

    G4double InnerRadius = 0*cm;
    G4double  OuterRadius = 5.08/2*cm;//2 inches -> 5.08 cm
    G4double Height = 2*mm;//2 discs stacked -> simplifying to cylinder

    G4ThreeVector Center(0,0, zp+Height/2);
    G4Tubs *VolSolid = new G4Tubs("Simulated Solid", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength=-1; //Flag from standard Bounding Box
    dBBxlo = -OuterRadius - 1*mm;
    dBBxhi = OuterRadius + 1*mm;
    dBBylo = -OuterRadius - 1*mm;
    dBByhi = OuterRadius + 1*mm;
    dBBzlo = zp - Height - 1*mm;
    dBBzhi = zp + Height + 1*mm;
  }

 if (fSourceMaterialID == 78) {
    FoundID = true;
    density = 4.338*g/cm3;  //mass: 470.2 g, vol: 7.1*7.1*2.15 cm^3
    sprintf(fSourceMaterialName,"Lively, 230628, CEvNS@ESS, CsI Crystal");
    fMat = new G4Material("CsI",density,2);
    fMat->AddElement(elCs, mass_fraction = 50 * perCent);
    fMat->AddElement(elI, mass_fraction = 50 * perCent);
 
    G4double xLength = 7.1*cm;   
    G4double yLength = 7.1*cm;
    G4double Height = 2.15*cm;
    G4VSolid *CsIBox = new G4Box("CsIBox",xLength/2, yLength/2, Height/2);
    G4ThreeVector Center(0,0,zp+Height/2 + 0.5*mm);
    fLogContents = new G4LogicalVolume(CsIBox, fMat, "LogCsIBox", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength=-1; //Flag from standard Bounding Box
    dBBxlo = -xLength - 1*mm;
    dBBxhi = xLength + 1*mm;
    dBBylo = -yLength - 1*mm;
    dBByhi = yLength + 1*mm;
    dBBzlo = zp - Height - 1*mm;
    dBBzhi = zp + Height + 1*mm;
  }

 if (fSourceMaterialID == 79){
    FoundID = true;
    //gopher Steel L-Shaped Holder (Rabbit Ear), 919.2 g on top of large acrylic stand, Run 230531
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    density = 7.85*g/cm3;  // Use density for A29 (AISI 1060) Carbon Steel
    sprintf(fSourceMaterialName,"Steel Holder");
    fMat= new G4Material("Steel Holder",density,3);
    fMat->AddElement(elC,  mass_fraction = 0.7 * perCent);
    fMat->AddElement(elMn, mass_fraction = 0.9 * perCent);
    fMat->AddElement(elFe, mass_fraction = 98.4 * perCent);

    G4double Length1 = 10.2*cm; //perpendicular to can
    G4double Width1 = 10.2*cm; //radially from can
    G4double Height1 = 0.5*cm; //vertically 

    G4double Length2= 0.5*cm; //perpendicular to can
    G4double Width2 = 10.2*cm; //radially from can
    G4double Height2 = 10.2*cm; //vertically 

    G4RotationMatrix *Rot1= new G4RotationMatrix(0*deg,0*deg,0*deg);
    G4ThreeVector Diff(5.1*cm,0*cm,5.1*cm);

    G4double LengthA = 25.4*cm; //perpendicular to can
    G4double WidthA = 19.05*cm; //radially from can
    G4double HeightA = 0.47625*cm; //vertically  

    // Placed centered on top of can:
    G4ThreeVector Center(0,0, zp+Height1/2+HeightA);
    G4ThreeVector CenterA(0,0, zp+HeightA/2);

    //define source geometry however you want. 
    G4Box *VolSolid1 = new G4Box("Simulated Solid", Length1/2, Width1/2, Height1/2);
    G4Box *VolSolid2 = new G4Box("Simulated Solid", Length2/2, Width2/2, Height2/2);
    G4VSolid *VolSolid = new G4UnionSolid("Both Plates", VolSolid1, VolSolid2, Rot1, Diff);
  
    G4Box *VolSolidA = new G4Box("Acrylic Stand", LengthA/2, WidthA/2, HeightA/2);
        
    G4LogicalVolume *fLogAcrylicStand = new G4LogicalVolume(VolSolidA, fMatAcrylic, "LogAcryclicStand", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyAcrylicStand = new G4PVPlacement(noRotation, CenterA, fLogAcrylicStand, "Acrylic Stand", logdetector, false, 0); 

    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);
    dBoundingBoxLength = 35*cm;
  }  

  if (fSourceMaterialID == 80){
    FoundID = true;
    //gopher Steel Chain - Two Links, Run 230609
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");
    
    fMat = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    density = 7.85*g/cm3;  // Use density for A29 (AISI 1060) Carbon Steel
    sprintf(fSourceMaterialName,"Steel Chain");
    fMat= new G4Material("Steel Chain",density,3);
    fMat->AddElement(elC,  mass_fraction = 0.7 * perCent);
    fMat->AddElement(elMn, mass_fraction = 0.9 * perCent);
    fMat->AddElement(elFe, mass_fraction = 98.4 * perCent);

    // Chain
    G4double InnerRadius = 2.45/2*cm;
    G4double OuterRadius = 3.45/2*cm; //radially from can
    G4double Height = 0.5*cm; //vertically    

    G4RotationMatrix *Rot1= new G4RotationMatrix(0*deg,0*deg,0*deg);
    G4ThreeVector Diff(3.45*cm,0*cm,0*cm);

    // Stand
    G4double LengthA = 25.4*cm; //perpendicular to can
    G4double WidthA = 19.05*cm; //radially from can
    G4double HeightA = 0.47625*cm; //vertically  

    // Placed centered on top of can:
    G4ThreeVector Center(-OuterRadius,0, zp+Height/2+HeightA);
    G4ThreeVector CenterA(0,0, zp+HeightA/2);

    //define source geometry however you want. 
    G4Tubs *VolSolid1 = new G4Tubs("Simulated Solid", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    G4Tubs *VolSolid2 = new G4Tubs("Simulated Solid", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    G4VSolid *VolSolid = new G4UnionSolid("Two Chain Links", VolSolid1, VolSolid2, Rot1, Diff);

    G4Box *VolSolidA = new G4Box("Acrylic Stand", LengthA/2, WidthA/2, HeightA/2);        
    G4LogicalVolume *fLogAcrylicStand = new G4LogicalVolume(VolSolidA, fMatAcrylic, "LogAcryclicStand", 0,0,0);
    __attribute__((unused)) G4VPhysicalVolume *fPhyAcrylicStand = new G4PVPlacement(noRotation, CenterA, fLogAcrylicStand, "Acrylic Stand", logdetector, false, 0); 

    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);

    dBoundingBoxLength=-1; //Flag from standard Bounding Box
    dBBxlo = -OuterRadius*2 - 1*mm;
    dBBxhi = OuterRadius*2 + 1*mm;
    dBBylo = -OuterRadius*2 - 1*mm;
    dBByhi = OuterRadius*2 + 1*mm;
    dBBzlo = zp - Height - 1*mm;
    dBBzhi = zp + Height + 1*mm;
  }
  
   if (fSourceMaterialID == 81){
    FoundID = true;
    density = 7.758*g/cm3;  // mass: 12.9568 g, volume: 1.67 cm^3
    sprintf(fSourceMaterialName,"QUBITS IR Filters Sample");
    fMat =new G4Material("Copper",density,1);
    fMat->AddElement(elCu, mass_fraction = 100.0* perCent);

    G4double InnerRadius = 0*cm;

    G4double OuterRadius1 = .35*cm;//Larger central cylinder
    G4double OuterHeight1 = 2.8*cm;

    G4double OuterRadius2 = 0.25*cm;//Cylinders on top and bottom of geometry
    G4double OuterHeight2 = 1.5*cm;

    G4double OuterHeight3 = OuterHeight1 + OuterHeight2;

    G4double CavityRadius = 0.10*cm;//Inner Cylindrical empty space to be subtracted
    G4double CavityHeight = 2.8*cm;
    G4double CavityLength = 1.8*cm;

    G4Tubs *VolCyl1 = new G4Tubs("Middle cylinder",InnerRadius,OuterRadius1,OuterHeight1/2,0*deg,360*deg);
    G4ThreeVector Center1(0, 0, zp+OuterHeight1/2+OuterHeight2);

    G4Tubs *VolCyl2 = new G4Tubs("Bottom Cylinder",InnerRadius,OuterRadius2,OuterHeight2/2,0*deg,360*deg);
    G4ThreeVector Center2(0, 0, zp+OuterHeight2/2);

    G4Tubs *VolCyl3 = new G4Tubs("Top Cylinder",InnerRadius,OuterRadius2,OuterHeight2/2,0*deg,360*deg);
    G4ThreeVector Center3(0, 0, zp+OuterHeight2*3/2+OuterHeight1);

    G4Tubs *VolCav = new G4Tubs("Cavity",InnerRadius, CavityRadius,CavityLength/2,0*deg,360*deg);
    G4ThreeVector Center4(0, 0, zp+CavityHeight);

    G4ThreeVector Difference1 = Center1 - Center2;
    G4ThreeVector Difference2 = Center3 - Center2;
    G4ThreeVector DifferenceCav = Center4 - Center2;
   
    G4RotationMatrix *Rot1= new G4RotationMatrix(0*deg,8*deg,0*deg);

    G4VSolid *midbot = new G4UnionSolid("Sample without cavity and top", VolCyl2, VolCyl1, noRotation, Difference1);
    G4VSolid *nocavity = new G4UnionSolid("Sample without cavity", midbot, VolCyl3, noRotation, Difference2);
    G4VSolid *FullSamp = new G4SubtractionSolid("Sample with cavity",nocavity, VolCav, noRotation, DifferenceCav);


    fLogContents = new G4LogicalVolume(FullSamp, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(Rot1, G4ThreeVector(0,0,-OuterHeight2/2), fLogContents, "Source Solid", logdetector, false, 0);

    dBoundingBoxLength=-1;  //Flag from standard Bounding Box
    dBBxlo = - 10.5*mm;
    dBBxhi = 10.5*mm;
    dBBylo = - 10.5*mm;
    dBByhi = 10.5*mm;
    dBBzlo = - zp - 1*mm;
    dBBzhi = zp + OuterHeight3 + 1*mm;
} 

if (fSourceMaterialID == 82) {
  //Elliptical Tube for Stainless Steel Bellows Flanges Pieces
  //Can be used for a General Oval/Elliptical Shaped Tube 
    FoundID = true;
    density = 1.619*g/cm3;   //using effective density: mass/volume of elliptical cylinder, eff density is 1695.2g/1046.78 cm3
    sprintf(fSourceMaterialName,"SBC Flange Pieces");
    fMat = new G4Material("Stainless Steel",density,4);
    fMat->AddElement(elCr, mass_fraction = 17.5 * perCent); 
    fMat->AddElement(elFe, mass_fraction = 68.0 * perCent); 
    fMat->AddElement(elNi, mass_fraction = 12.0 * perCent); 
    fMat->AddElement(elMo, mass_fraction = 2.5 * perCent);

    G4double xSemiAxis = 14*cm;
    G4double ySemiAxis = 8*cm;
    G4double thickness = 2.8*cm; 

    G4VSolid *VolSolid = new G4EllipticalTube("Flange Solid", xSemiAxis, ySemiAxis, thickness/2);
    G4ThreeVector Center(0, 0, zp+thickness);

    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);

    dBoundingBoxLength = 20*cm;

    //Write my code within these lines 
}

if (fSourceMaterialID == 83){
   // Small Thin Disk with Bounding Box Setup
   FoundID = true; 
   density = 1.624*g/cm3; // Density for SBC IA PTFE Inner Tower
   sprintf(fSourceMaterialName, "SBC IA PTFE Inner Tower");
   fMat = new G4Material("SBC Disk", density,2); //PTFE 
   fMat->AddElement(elC, n_atoms = 2);
   fMat->AddElement(elF, n_atoms = 4);
   
   G4double InnerRadius = 0;
   G4double OuterRadius = 9.75*cm;
   G4double Height = 1*mm;

   G4ThreeVector Center(0, 0, zp+Height/2);
   G4Tubs *VolSolid = new G4Tubs("Inner Tower", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
   fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
   fPhyContents = new G4PVPlacement(noRotation, Center, fLogContents, "Source Solid", logdetector, false, 0);

    //Setup Alternate Bounding Box
    dBoundingBoxLength=-1;  //Flag from standard Bounding Box
    dBBxlo = -OuterRadius/2 - 1*cm;
    dBBxhi = OuterRadius/2 + 1*cm;
    dBBylo = -OuterRadius/2 - 1*cm;
    dBByhi = OuterRadius/2 + 1*cm;
    dBBzlo = zp - 1*cm;
    dBBzhi = zp + Height + 1*cm;
    } 
  
 if (fSourceMaterialID == 84){
    //Geometry for PGT 240125
    FoundID = true;
    density = 1.375*g/cm3; //mass = 113.7 vol = 82.702 
    sprintf(fSourceMaterialName,"ProPEX");
    fMat = new G4Material("PEX",density,2);
    fMat->AddElement(elC, n_atoms=2);
    fMat->AddElement(elH, n_atoms=4);

    G4RotationMatrix *rot = new G4RotationMatrix(0.0*deg,90.0*deg,0.0*deg);

    G4double InnerRadius = 2*cm;
    G4double OuterRadius = 2.5*cm;
    G4double Height = 11.7*cm;
    G4ThreeVector Center(0, 0, zp+OuterRadius);

    G4Tubs *VolSolid = new G4Tubs("PEX Tube",InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(rot, Center, fLogContents, "Source Solid", logdetector, false, 0);

  }

    if (fSourceMaterialID == 85) {
    FoundID = true;
    density = 2.8506*g/cm3; //Density of the entire impeller using mass = 1534.9g
    sprintf(fSourceMaterialName, "Delrin, Polyoxymethylene");
    fMat = new G4Material("Delrin", density, 3); //Delrin or Polyoxymethylene 
    fMat->AddElement(elC, n_atoms = 1);
    fMat->AddElement(elH, n_atoms = 2);
    fMat->AddElement(elO, n_atoms = 1);

    //Create the First Cylinder 
    G4double InnerRadius1 = 0*cm;
    G4double OuterRadius1 = 3.75*cm;
    G4double Height1 = 10.75*cm;
    G4Tubs *VolSolid1 = new G4Tubs("Cylinder 1", InnerRadius1, OuterRadius1, Height1/2, 0*deg, 360*deg);

    //Create the Second Cylinder 
    G4double InnerRadius2 = 0*cm;
    G4double OuterRadius2 = 6.85*cm;
    G4double Height2 = 2.25*cm;
    G4Tubs *VolSolid2 = new G4Tubs("Cylinder 2", InnerRadius2, OuterRadius2, Height2/2, 0*deg, 360*deg);

    //Connect the 2 Cylinders 
    G4ThreeVector Center(0, 0, 2.825*cm);
    G4VSolid *VolSolidC = new G4UnionSolid("2 Connected Cylinders", VolSolid1, VolSolid2, noRotation, Center);

    //Get Rid of the Cavities Inside 
    G4double InnerRadiusC1 = 0*cm;
    G4double OuterRadiusC1 = 2.1*cm;
    G4double HeightC1 = 8.75*cm;
    G4Tubs *VolSolidC1 = new G4Tubs("Cavity 1", InnerRadiusC1, OuterRadiusC1, HeightC1/2, 0*deg, 360*deg);

    G4double InnerRadiusC2 = 0*cm;
    G4double OuterRadiusC2 = 2.75*cm;
    G4double HeightC2 = 2.0*cm;
    G4Tubs *VolSolidC2 = new G4Tubs("Cavity 2", InnerRadiusC2, OuterRadiusC2, HeightC2/2, 0*deg, 360*deg);

    G4ThreeVector Center2(0, 0, -1.0*cm);
    G4ThreeVector Center3(0, 0, 4.375*cm);
    G4VSolid *Interm1 = new G4SubtractionSolid("Intermediate 1", VolSolidC, VolSolidC1, noRotation, Center2);
    G4VSolid *Empeller = new G4SubtractionSolid("Intermediate 2", Interm1, VolSolidC2, noRotation, Center3);

    //Visualizing the Solid 
    G4ThreeVector Center4(0, -3*cm,zp+OuterRadius1);
    G4RotationMatrix *Rot4 = new G4RotationMatrix(0.0*deg, 90.0*deg ,0.0*deg);
    fLogContents = new G4LogicalVolume(Empeller, fMat, "LogicalSolid", 0,0,0);
    fPhyContents = new G4PVPlacement(Rot4, Center4, fLogContents, "Source Solid", logdetector, false, 0);
  }
/*
   if (fSourceMaterialID == 86) {

  //Legend Experiment Copper Embedded into Teflon Holder 
    FoundID = true;
    sprintf(fSourceMaterialName,"Teflon Copper Holder");
 
    G4Material* Teflon = new G4Material("Teflon", 2.8946*g/cm3,2);

    Teflon->AddElement(elC, n_atoms=2);

    Teflon->AddElement(elF, n_atoms=4);
 
    G4Material* Copper = new G4Material("Copper", 9.2882*g/cm3, 1);

    Copper->AddElement(elCu, n_atoms=1);
 
    //Creating Geometry for the Cylinder Teflon Holder 

    G4double InnerRadius = 0*cm;

    G4double OuterRadius = 2.5*cm;

    G4double Height = 5*cm;

    G4Tubs *VolSolid1 = new G4Tubs("Teflon Cylinder", InnerRadius, OuterRadius, Height/2, 0*deg, 360*deg);
 
    G4double Length = 2.5*cm;

    G4double Width = 2.5*cm;

    G4double HeightC = 0.5*cm;
 
    //Creating Geometry for the Embedded Copper

    G4double Length1 = 2.5*cm;

    G4double Width1 = 2.5*cm;

    G4double Height1 = 1.0*cm;
 
    G4ThreeVector CenterS(0, 0, -Height/2+HeightC/2);

    G4Box *VolSolidC = new G4Box("Copper Cavity", Length/2, Width/2, HeightC/2);

    G4VSolid *TeflonWCav = new G4SubtractionSolid("Teflon Holder with Copper Cavity", VolSolid1, VolSolidC, noRotation, CenterS);
 
    G4ThreeVector Center(0, 0, zp + Height1/2);

    G4Box *MCopper = new G4Box("Embedded Majorana Copper", Length1/2, Width1/2, Height1/2);
 
    G4ThreeVector CenterM(0, 0, zp+(Height+Height1)/2);
 
    fLogContents = new G4LogicalVolume(TeflonWCav, Teflon, "Logical Solid", 0,0,0);

    fPhyContents = new G4PVPlacement(noRotation, CenterM, fLogContents, "Source Solid", logdetector, false, 0);
 
    __attribute__((unused)) G4LogicalVolume *fLogContentsCu = new G4LogicalVolume(MCopper, Copper, "Logical Solid", 0,0,0);

    __attribute__((unused)) G4PVPlacement *fPhyContentsCu = new G4PVPlacement(noRotation, Center, fLogContentsCu, "Source Solid", logdetector, false, 0);

}
*/  


if (fSourceMaterialID == 87) {
    FoundID = true;  // Mark that the material ID has been found.
   
    // Geometry Number: 16
    // Material Number: 87
    // Detector Number: 3
   
    // Define the acrylic material using the GEANT4 material manager.
    G4Material* fMatAcrylic = man->FindOrBuildMaterial("G4_PLEXIGLASS");

    // Define the density of steel (7.9 g/cm^3).
    // Note: This is a generic steel composition and density, not tied to a specific alloy or effective density.
    G4double densitySteel = 7.9*g/cm3;

    // Create a new material named "Steel" with 4 components.
    G4Material* fMatSteel = new G4Material("Steel",densitySteel,4);
   
    // Add elements to the steel material with their respective mass fractions.
    fMatSteel->AddElement(elCr, mass_fraction = 17.5 * perCent);  // Chromium: 17.5%
    fMatSteel->AddElement(elFe, mass_fraction = 68.0 * perCent);  // Iron: 68%
    fMatSteel->AddElement(elNi, mass_fraction = 12.0 * perCent);  // Nickel: 12%
    fMatSteel->AddElement(elMo, mass_fraction = 2.5 * perCent);   // Molybdenum: 2.5%

    // Define the z-shift for positioning geometry.
    G4double zShift = zp;

    // Define the outer radius and height for the first cylinder (main solid).
    G4double OuterRadius = 25.0 * mm;  // Outer radius of the main cylinder.
    G4double OuterHeight = 40.0 * mm;  // Height of the main cylinder.

    // Create the main cylindrical volume.
    G4Tubs* VolCylinder = new G4Tubs("MainCylinder", 0, OuterRadius, OuterHeight / 2, 0 * deg, 360 * deg);

    // Define the dimensions for the cavity.
    G4double OuterRadiusCavity = 19.0 * mm;  // Outer radius of the cavity.
    G4double OuterHeight2 = 6.0 * mm;        // Height of the second cylinder (bottom).

    // Define dimensions for the quick connect component.
    G4double quickConnectRadius = 8.5 * mm;  // Radius of the quick connect.
    G4double quickConnectHeight = 40.0 * mm; // Height of the quick connect.

    // Define the positions for different components.
    G4ThreeVector Center(0, 0, zShift + OuterHeight / 2 + OuterHeight2);  // Center position for the main solid.
    G4ThreeVector Center2(0, 0, -(OuterHeight / 2 + OuterHeight2 / 2));  // Position the smaller cylinder below the main one.
    G4ThreeVector CenterQuickConnect(0, 0, zShift + OuterHeight / 2 + OuterHeight2 + quickConnectHeight);  // Centered on top.

    // Create a spherical cavity inside the main cylinder.
    G4Sphere* VolCavity = new G4Sphere("Cavity", 0, OuterRadiusCavity, 0 * deg, 360 * deg, 0 * deg, 180 * deg);

    // Subtract the cavity from the main cylinder to create the Lucas Cell.
    G4VSolid* VolSolid = new G4SubtractionSolid("LucasCell", VolCylinder, VolCavity, noRotation, G4ThreeVector(0, 0, -OuterHeight / 2));

    // Create the smaller bottom cylinder.
    G4Tubs* VolCylinder2 = new G4Tubs("BottomCylinder", 0, OuterRadius, OuterHeight2 / 2, 0 * deg, 360 * deg);

    // Combine the main solid and bottom cylinder.
    G4VSolid* VolCombined = new G4UnionSolid("CombinedCylinder", VolSolid, VolCylinder2, noRotation, Center2);

    // Create the quick connect cylindrical volume.
    G4Tubs* VolQuickConnect = new G4Tubs("QuickConnectTube", 0, quickConnectRadius, quickConnectHeight / 2, 0 * deg, 360 * deg);

    // Define logical volume for the combined solid using acrylic material.
    fLogContents = new G4LogicalVolume(VolCombined, fMatAcrylic, "LogFinalCombinedSolid", 0, 0, 0);

    // Place the combined solid inside the logical detector.
    fPhyContents = new G4PVPlacement(0, Center, fLogContents, "SourceSolid", logdetector, false, 0);

    // Define logical volume for the quick connect using steel material.
    fLogContents2 = new G4LogicalVolume(VolQuickConnect, fMatSteel, "Logical Solid", 0,0,0);

    // Place the quick connect component inside the logical detector.
    fPhyContents2 = new G4PVPlacement(0, CenterQuickConnect, fLogContents2, "SourceSolid", logdetector, false, 0);

    //
    // Set the bounding box dimensions based on the outer radius and positions.
    dBoundingBoxLength = -1;
    dBBxlo = -OuterRadius * 2 + 1 * mm;  // X-axis lower bound.
    dBBxhi = OuterRadius * 2 - 1 * mm;   // X-axis upper bound.
    dBBylo = dBBxlo;  // Y-axis lower bound (same as X).
    dBByhi = dBBxhi;  // Y-axis upper bound (same as X).
    dBBzlo = zShift - 1 * mm;  // Z-axis lower bound (adjusted for both cylinders).
    dBBzhi = zShift + OuterHeight + OuterHeight2 + quickConnectHeight + 1 * mm;  // Z-axis upper bound (including quick connect).
}

  if(!FoundID) {
    sprintf(fMessage,"SG4SrcMisc could not find SourceMaterial %d",fSourceMaterialID);


    Error(fMessage);  
} 


if (fSourceMaterialID == 88) {  // Your material number
    FoundID = true;

    // Define material for stainless steel plate
    G4Material* fMat = man->FindOrBuildMaterial("G4_STAINLESS-STEEL");

    // Use the provided dimensions of your sample but adjust for orientation
    G4double Length = 10.0 * cm;   // length of the plate (along X-axis)
    G4double Width  = 7.6 * cm;    // width of the plate (along Y-axis)
    G4double Height = 0.6 * cm;    // height (thickness) of the plate (along Z-axis)

    // Define the box geometry for the stainless steel plate
    G4Box *VolSolid = new G4Box("StainlessSteelPlate", Length/2, Width/2, Height/2);

    // Logical volume
    fLogContents = new G4LogicalVolume(VolSolid, fMat, "LogSteelPlate", 0, 0, 0);

    // Create rotation matrix
    G4RotationMatrix* rotation = new G4RotationMatrix();
    rotation->rotateX(90 * deg);  // Rotate around X-axis
    // Alternatively, you could use: rotation->rotateY(90 * deg); for Y-axis

    // Position the plate at the desired location in the world
    G4ThreeVector Center(0, 0, zp + Height/2);  // Adjust zp to the correct position

    // Physical volume (with rotation)
    fPhyContents = new G4PVPlacement(rotation, Center, fLogContents, "Steel Plate", logdetector, false, 0);

    // Define the bounding box size
    dBoundingBoxLength = Length;  // Size of bounding box in the simulation (in this case, the length of the plate)
}


  if(!FoundID) {
    sprintf(fMessage,"SG4SrcMisc could not find SourceMaterial %d",fSourceMaterialID);


    Error(fMessage);  
} }


